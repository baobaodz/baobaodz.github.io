<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【VSCode】Windows下VSCode集成zsh</title>
    <link href="/2022/07/14/%E3%80%90VSCode%E3%80%91Windows%E4%B8%8BVSCode%E9%9B%86%E6%88%90zsh/"/>
    <url>/2022/07/14/%E3%80%90VSCode%E3%80%91Windows%E4%B8%8BVSCode%E9%9B%86%E6%88%90zsh/</url>
    
    <content type="html"><![CDATA[<h3 id="zsh是什么"><a href="#zsh是什么" class="headerlink" title="zsh是什么"></a>zsh是什么</h3><p>zsh 官网 : <a href="https://www.zsh.org/">https://www.zsh.org/</a> </p><p>oh-my-zsh官网 : <a href="http://ohmyz.sh/">http://ohmyz.sh/</a></p><p>zsh是shell语言类型，兼容bash，提供强大的命令行功能，比如tab补全，自动纠错功能等。缺点就是配置太麻烦，好在有一个叫做<code>oh-my-zsh</code>的开源项目，很好的弥补了这一缺陷，只需要修修改改配置文件，就能很顺手。</p><blockquote><p>zsh和 oh-my-zsh的关系 zsh 是 Shell 中的一种，功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash, 于是他创建了一个名为<code>oh-my-zsh</code>的开源项目…自此，只需要简单的安装配置，也可以享受使用zsh</p></blockquote><h3 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h3><p><code>mac</code>上默认集成了<code>zsh</code>，<code>windows</code>上需要借助<code>mysy2</code>的终端软件来安装zsh。</p><p>下载<code>mysy2</code><a href="https://www.msys2.org/"><code>https://www.msys2.org/</code></a>（以安装路径<code>C:\msys64</code>为例）</p><p>修改<code>home</code>目录为<code>Windows home</code>目录，修改<code>C:\msys64\etc\nsswitch.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">db_home: cygwin desc ----&gt; db_home: windows<br></code></pre></div></td></tr></table></figure><p>启动<code>C:\msys64\msys2.exe</code>，在<code>msys2</code>的终端环境里键入以下命令并回车，即自动安装<code>zsh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">pacman -S zsh<br></code></pre></div></td></tr></table></figure><p>由于<code>msys2 </code>指定 <code>MSYSCON</code> 为 <code>defterm</code> 时默认是执行<code>bash.exe</code>， 我们简单地把 <code>C:\msys64\msys2_shell.cmd</code> 大概第5行的<code>bash</code>改成<code>zsh</code>即可：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash"><span class="hljs-built_in">set</span> <span class="hljs-string">&quot;LOGINSHELL=bash&quot;</span> ----&gt; <span class="hljs-built_in">set</span> <span class="hljs-string">&quot;LOGINSHELL=zsh&quot;</span><br></code></pre></div></td></tr></table></figure><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JSON">pacman -S git  // 首先安装git<br>sh -c &quot;$(curl -fsSL [https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh](https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh))&quot;<br></code></pre></div></td></tr></table></figure><h3 id="vscode配置zsh"><a href="#vscode配置zsh" class="headerlink" title="vscode配置zsh"></a>vscode配置zsh</h3><p><code>vscode</code>的<code>setting.json</code>追加:</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JSON">&quot;terminal.integrated.defaultProfile.windows&quot;: &quot;GitBash&quot;,<br>&quot;terminal.integrated.profiles.windows&quot;: &#123;<br>  &quot;GitBash&quot;: &#123;<br>    &quot;path&quot;: &quot;C://msys64//msys2_shell.cmd&quot;,<br>    &quot;args&quot;: [<br>      &quot;-defterm&quot;,<br>      &quot;-mingw64&quot;,<br>      &quot;-no-start&quot;,<br>      &quot;-here&quot;,<br>      &quot;-lic&quot;,<br>      <span class="hljs-string">&quot;cd $PWD; exec zsh&quot;</span><br>    ]<br>  &#125;<br> &#125;,<br></code></pre></div></td></tr></table></figure><p>在<code>vscode</code>中就可以看到新添加的终端</p><p><img src="https://image.baobaodz.top/blog/vcsode-new-terminal.png" alt="新终端"></p><h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><p>打开<code>.zshrc</code>（一般在<code>c</code>盘当前用户目录下<code>C:\Users\baodunzheng</code>）找到包含<code>ZSH_THEME=</code>的这一行，修改为自己喜欢的主题。</p><p><code>zsh</code>的众多主题见链接：<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a></p><p>当然如果修改成<code>ZSH_THEME=&quot;random&quot;</code> 每次启动都会启用随机主题，也不失为选择困难症的福音。</p><p>当然如果对现有主题不满意，可以自定义主题，对现有主题改进，只需要</p><figure class="highlight text"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">1、在`~\.oh-my-zsh\custom\themes` 目录下新建或拷贝现有主题文件修改名称为`my-agnoster.zsh-theme.zsh-theme`<br>2、`.zshrc`中`ZSH_THEME=&quot;my-agnoster&quot;` ，主题名要与自定义主题文件名前半部分对应上<br></code></pre></div></td></tr></table></figure><h3 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h3><h4 id="提示插件"><a href="#提示插件" class="headerlink" title="提示插件"></a>提示插件</h4><p>安装提示插件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git <span class="hljs-built_in">clone</span> [https://github.com/zsh-users/zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions<br></code></pre></div></td></tr></table></figure><p>编辑<code>.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">plugins=(git zsh-autosuggestions)<br></code></pre></div></td></tr></table></figure><h4 id="高亮插件"><a href="#高亮插件" class="headerlink" title="高亮插件"></a>高亮插件</h4><p>安装高亮插件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">git <span class="hljs-built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="hljs-variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br></code></pre></div></td></tr></table></figure><p>编辑<code>.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">plugins=(git zsh-autosuggestions zsh-syntax-highlighting)<br></code></pre></div></td></tr></table></figure><p>最后<code>source ~/.zshrc</code> 使其生效</p><p><img src="https://image.baobaodz.top/blog/oh-my-zsh-theme.png" alt="新主题"></p><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p><code>npm -v</code>时，报错<code>command not found: npm</code> 原因是找不到npm的环境，需要手动指定</p><p>执行 <code>which npm</code> 找到<code>npm</code>安装运行环境</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash">baodunzheng@DESKTOP-HEK6UKM MSYS ~<br>$ <span class="hljs-built_in">which</span> npm<br>/d/work/dev/nodejs/npm<br></code></pre></div></td></tr></table></figure><p>去除<code>/npm</code> ，拿到<code>/d/work/dev/nodejs</code>进入<code>.zshrc</code> 添加一行 <code>export PATH=/d/work/dev/nodejs:$PATH</code> 解决</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Bash"><span class="hljs-comment"># If you come from bash you might have to change your $PATH.</span><br><span class="hljs-comment"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span><br>  <span class="hljs-built_in">export</span> PATH=/d/work/dev/nodejs:<span class="hljs-variable">$PATH</span><br><span class="hljs-comment"># Path to your oh-my-zsh installation.</span><br><span class="hljs-built_in">export</span> ZSH=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.oh-my-zsh&quot;</span><br></code></pre></div></td></tr></table></figure><p>至此，适合自己的<code>zsh</code>基本可以用了</p><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><ul><li><a href="https://www.zhihu.com/question/21418449">为什么说 zsh 是 shell 中的极品？</a></li><li><a href="https://blog.csdn.net/qq_30756923/article/details/124263549">Windows下vscode集成zsh</a></li><li><a href="https://blog.csdn.net/Chuancey_CC/article/details/118223562?spm=1001.2101.3001.6650.12&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12-118223562-blog-124263549.pc_relevant_multi_platform_whitelistv1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-12-118223562-blog-124263549.pc_relevant_multi_platform_whitelistv1&utm_relevant_index=17">Windows安装真正的zsh——不是在WSL子系统下哦</a></li><li><a href="https://blog.csdn.net/haofandedaima/article/details/119699633">mac安装oh-my-zsh出现command not found: npm问题解决</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Angular】本地调试代理转发</title>
    <link href="/2022/07/13/%E3%80%90Angular%E3%80%91%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"/>
    <url>/2022/07/13/%E3%80%90Angular%E3%80%91%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h3 id="代理转发"><a href="#代理转发" class="headerlink" title="代理转发"></a>代理转发</h3><p>在angular项目中本地调试时，经常会遇到跨域的问题，angular也给出了解决方案，通过创建并配置<code>proxy.conf.json</code> 来转发代理，具体可参考官网给出的例子</p><blockquote><p><a href="https://angular.cn/guide/build#proxying-to-a-backend-server">https://angular.cn/guide/build#proxying-to-a-backend-server</a></p></blockquote><p><code>proxy.conf.json</code> 配置</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JSON">&#123;<br>  <span class="hljs-attr">&quot;/api&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;http://baobaodz.top&quot;</span>,<br>    <span class="hljs-attr">&quot;secure&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;changeOrigin&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 如果你要访问的后端不在 localhost 上，还要设置 changeOrigin 选项</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;/facade&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;http://baobaodz.top&quot;</span>,<br>    <span class="hljs-attr">&quot;secure&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;changeOrigin&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">&quot;/coapi&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;target&quot;</span>: <span class="hljs-string">&quot;http://baobaodz.top&quot;</span>,<br>    <span class="hljs-attr">&quot;secure&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;changeOrigin&quot;</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>package.json</code> 配置：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JSON">&quot;scripts&quot;: &#123;<br>  &quot;start:dev&quot;: &quot;ng serve --proxy-config proxy.dev.json --disable-host-check --port 7110&quot;,<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>执行时 <code>npm run start:dev</code> 即可特定的 <code>URL</code> 转发给后端服务器，从而达到本地调试的目的。</p><h3 id="登录跳转-手动操作"><a href="#登录跳转-手动操作" class="headerlink" title="登录跳转-手动操作"></a>登录跳转-手动操作</h3><p>然而再实际开发中，代理的网址往往还需要登录，启动服务后发现会跳转到登录页面。究其本质，是本地启动服务缺少了正常访问的<code>token</code>和<code>cookie</code>。基本上有两种方法</p><h4 id="1、手动复制Cookies"><a href="#1、手动复制Cookies" class="headerlink" title="1、手动复制Cookies"></a>1、手动复制<code>Cookies</code></h4><p>将登录的网站中<code>application</code>里的<code>Cookies</code>里的<code>refresh_token</code>和<code>access_token </code>复制到本地调试的网站里，比如下图的<a href="http://localhost:7110/"><code>http://localhost:7110</code></a><a href="http://localhost:7110/">中</a></p><p><a href="https://imgtu.com/i/jR0m79"><img src="https://s1.ax1x.com/2022/07/13/jR0m79.png" alt="cookie"></a></p><h4 id="2、proxy-conf-json-配置"><a href="#2、proxy-conf-json-配置" class="headerlink" title="2、proxy.conf.json 配置"></a>2、<code>proxy.conf.json</code> 配置</h4><p>找到一个真实请求，将<code>Request Headers</code>的<code>cookie</code>的内容复制到 下面的<code>headers</code>的<code>Cookie</code>选项中，其实只要<code>refresh_token</code>和<code>access_token</code>就可以了</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript">&#123;<br>  <span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;http://baobaodz.top&quot;</span>,<br>    <span class="hljs-string">&quot;secure&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;changeOrigin&quot;</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 如果你要访问的后端不在 localhost 上，还要设置 changeOrigin 选项</span><br>    <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;refresh_token=a5074880de7843b6875fb0a06160c5f5; access_token=xxx&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;/facade&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;http://baobaodz.top&quot;</span>,<br>    <span class="hljs-string">&quot;secure&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;changeOrigin&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;refresh_token=a5074880de7843b6875fb0a06160c5f5; access_token=xxx&quot;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-string">&quot;/coapi&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;http://baobaodz.top&quot;</span>,<br>    <span class="hljs-string">&quot;secure&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-string">&quot;changeOrigin&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;headers&quot;</span>: &#123;<br>      <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;refresh_token=a5074880de7843b6875fb0a06160c5f5; access_token=xxx&quot;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>本质上是在发请求的时候模拟<code>Request Headers</code>的<code>cookie</code></p><p><a href="https://imgtu.com/i/jR0TuF"><img src="https://s1.ax1x.com/2022/07/13/jR0TuF.png" alt="请求头"></a></p><h3 id="登录跳转-自动操作"><a href="#登录跳转-自动操作" class="headerlink" title="登录跳转-自动操作"></a>登录跳转-自动操作</h3><p>无论是手动复制<code>Cookies</code> 还是 复制了token 配置到 <code>proxy.conf.json</code> 文件中，都需手动找到然后复制一连串的数字，比较麻烦。是否可以通过接口拿到<code>refresh_token</code>和<code>access_token</code>，再通过代码注入到代理的配置中呢？</p><p>官网上确实给出了实现的可能，发出请求前先动态修改一下，可以添加 <code>bypass</code> 选项</p><blockquote><p><a href="https://angular.cn/guide/build#bypass-the-proxy">https://angular.cn/guide/build#bypass-the-proxy</a></p></blockquote><p>结合<code>bypaas</code>, 对于想自动登录跳转，就有了新的思路。</p><p>需要新建对应的<code>proxy.conf.js</code> 文件</p><p>安装<code>axios</code>，用于执行<code>http</code>请求 <code>npm install -save-dev axios</code></p><p>具体逻辑如下</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 参考配置 https://angular.cn/guide/build#proxy-multiple-entries</span><br><span class="hljs-comment">// 更多配置 https://webpack.js.org/configuration/dev-server/#devserver-proxy</span><br><span class="hljs-comment">// 文件说明 通过调用登录接口，获取返回的数据拼成cookie赋值到代理的请求头里，无需手动配置任何token，即起即用</span><br><span class="hljs-comment">// 具体使用 1、npm install -save-dev axios 2、npm run start:devjs</span><br><span class="hljs-keyword">var</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><span class="hljs-keyword">var</span> cookie;<br><span class="hljs-keyword">var</span> loginInfo = &#123;<br>    url: <span class="hljs-string">&#x27;http://xxx/user/v2/login/account&#x27;</span>, <span class="hljs-comment">// 登录目标网站的接口</span><br>    user: &#123;<br>        account: <span class="hljs-string">&quot;17687711936&quot;</span>,<br>        password: <span class="hljs-string">&quot;xxx&quot;</span> <span class="hljs-comment">// 可能是原始密码，也可能是加密后的密码，以接口入参为准</span><br>    &#125;,<br>    proxyContext: [<span class="hljs-string">&quot;/api&quot;</span>, <span class="hljs-string">&quot;/coapi&quot;</span>, <span class="hljs-string">&quot;/facade&quot;</span>],<br>    proxyTarget: <span class="hljs-string">&#x27;http://baobaodz.top/&#x27;</span><br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loginAndGetCookie</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> axios.post(loginInfo.url, loginInfo.user);<br>    <span class="hljs-keyword">if</span> (response.status === <span class="hljs-number">200</span> &amp;&amp; response.data &amp;&amp; response.data.code === <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>        cookie = <span class="hljs-string">&#x27;refresh_token=&#x27;</span> + response.data.info.refresh_token + <span class="hljs-string">&#x27;;access_token=&#x27;</span> + response.data.info.access_token;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;[LOGIN] cookie: &quot;</span>, cookie);<br>    &#125;<br>&#125;<br>loginAndGetCookie(); <span class="hljs-comment">// 先登录</span><br>PROXY_CONFIG = [<br>    &#123;<br>        context: loginInfo.proxyContext,<br>        target: loginInfo.proxyTarget,<br>        secure: <span class="hljs-literal">false</span>,<br>        changeOrigin: <span class="hljs-literal">true</span>,<br>        bypass: <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, proxyOptions</span>) </span>&#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;🚀 ~ file: proxy.dev.js ~ line 32 ~ byPass ~ proxyOptions&quot;</span>, proxyOptions);<br>            proxyOptions[<span class="hljs-string">&#x27;headers&#x27;</span>][<span class="hljs-string">&#x27;Cookie&#x27;</span>] = cookie || <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (!cookie) &#123;<br>                loginAndGetCookie();<br>                proxyOptions[<span class="hljs-string">&#x27;headers&#x27;</span>][<span class="hljs-string">&#x27;Cookie&#x27;</span>] = cookie || <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125; <br>        &#125;,<br>        headers: &#123;<br>            Cookie: <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 动态填入</span><br>        &#125;,<br>    &#125;<br>]<br><span class="hljs-built_in">module</span>.exports = PROXY_CONFIG;<br></code></pre></div></td></tr></table></figure><p><code>package.json</code> 配置：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs JSON">&quot;scripts&quot;: &#123;<br>  &quot;start:dev&quot;: &quot;ng serve --proxy-config proxy.dev.json --disable-host-check --port 7110&quot;,<br>  &quot;start:devjs&quot;: &quot;ng serve --proxy-config proxy.dev.js --disable-host-check --port 7110&quot;,<br>&#125;,<br></code></pre></div></td></tr></table></figure><p>执行<code>npm run start:devjs</code>，查看控制台日志</p><p><a href="https://imgtu.com/i/jR07B4"><img src="https://s1.ax1x.com/2022/07/13/jR07B4.png" alt="日志"></a></p><p>看启动日志中的<code>proxyOptions </code>可以看到<code>Cookie</code>已经被填入，访问本地调试网站，也自动登录了进去。</p><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><h4 id="1、不引入额外的网络请求库axios"><a href="#1、不引入额外的网络请求库axios" class="headerlink" title="1、不引入额外的网络请求库axios"></a>1、不引入额外的网络请求库<code>axios</code></h4><p>毕竟<code>Angular</code>项目中使用的均为<code>HttpCilent </code>进行请求调用，在<code>proxy.conf.js</code> 中却引入了另外一个请求库<code>axios</code>，如果能一以贯之，不另外引入其他的库，想必是很好的。无奈本人技术水平有限，在<code>ts</code>的<code>constructor</code>中直接注入，在<code>js</code>中我就不会怎么注入<code>Http</code>了</p><h4 id="2、利用node热更新实现失效cookie自动更新"><a href="#2、利用node热更新实现失效cookie自动更新" class="headerlink" title="2、利用node热更新实现失效cookie自动更新"></a>2、利用<code>node</code>热更新实现失效<code>cookie</code>自动更新</h4><p>虽然通过上述操作解决了手动处理的麻烦，但是存在这种情况，当原网站的登录<code>cookie</code>失效后，需要重新登录，重新生成<code>cookie</code>，这个在<code>bypass</code>中是感知不到的，相应的本地调试也跳转到了登录页。虽然说重新执行<code>npm run start:devjs</code> 重新获取一次<code>cookie</code>就可以了，但是对于短时间内频繁登录失效的网站来说，也是一个很头疼的事情（虽然在实际开发中很少遇到）。如果能够实时获取线上地址的<code>cookie</code>与本地调试的<code>cookie</code>对比，如若不一致，同步线上的<code>cookie</code>至调试环境，岂不美哉！然而涉及到<code>node</code>的相关知识，暂时缺乏了解，还需研究下。</p><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><blockquote><p><a href="https://angular.cn/guide/build#bypass-the-proxy">https://angular.cn/guide/build#bypass-the-proxy</a></p></blockquote><blockquote><p><a href="https://segmentfault.com/a/1190000016314976/">https://segmentfault.com/a/1190000016314976/</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>happy birthday</title>
    <link href="/2021/12/24/happy-birthday/"/>
    <url>/2021/12/24/happy-birthday/</url>
    
    <content type="html"><![CDATA[<html><center>啊哈</center> </html><a id="more"></a><head><style type=”text/css”>    #rest-time {      color:blue     }</style></head><html><center><p>    今天是<span id="time">today</span></p></center></p><center><p>在新的一岁你已经持续美丽、优雅了 <span id="rest-time" style="color: skyblue;"></span></p></center><center><p>✨生日快乐✨</p></center><center><p>✨✨✨✨做你自己，偶尔下凡✨✨✨✨</p></center></html><script>      //今天的时间      let now = new Date();      now.setTime(now.getTime());      var today = now.getFullYear()+"年" + (now.getMonth()+1) + "月" + now.getDate() + "日";      document.getElementById('time').innerHTML= today;      console.log('hello',today)      let restTime = twoTimeInterval(new Date(),'2022-07-22 23:59:59');      document.getElementById('rest-time').innerHTML= restTime;        console.log('restTime',restTime)        setInterval(()=>{            let restTime = twoTimeInterval(new Date(),'2022-07-22 23:59:59');            document.getElementById('rest-time').innerHTML= restTime;        },1000)        function twoTimeInterval(startDate, endTime) {            // 结束时间            let d2 = endTime.replace(/\-/g, "/");            let date2 = new Date(d2);            // 时间相差秒数            let dateDiff = startDate.getTime() - date2.getTime();            // 计算出相差天数            let days = Math.floor(dateDiff / (24 * 3600 * 1000));            // 计算出小时数            let residue1 = dateDiff % (24 * 3600 * 1000); // 计算天数后剩余的毫秒数            let hours = Math.floor(residue1 / (3600 * 1000));            // 计算相差分钟数            let residue2 = residue1 % (3600 * 1000); // 计算小时数后剩余的毫秒数            let minutes = Math.floor(residue2 / (60 * 1000));            // 计算相差秒数            let residue3 = residue2 % (60 * 1000); // 计算分钟数后剩余的毫秒数            let seconds = Math.round(residue3 / 1000);            let returnVal =              ((days == 0) ? "" : days+" 天 ") +              ((hours == 0) ? "" : hours+" 时 ") +              ((minutes == 0) ? "" : minutes+" 分 ") +              ((seconds == 0) ? "" : seconds+" 秒 ");            return returnVal;      }</script><p><a href="https://imgtu.com/i/T2iGX6"><img src="https://s1.ax1x.com/2022/07/23/jXSgmt.jpg" alt="哈哈哈哈哈哈"></a></p><html><center>今天你说了算</center> </html><!-- flag of hidden posts -->]]></content>
    
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Angular】Angular应用启动流程</title>
    <link href="/2021/03/28/%E3%80%90Angular%E3%80%91Angular%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2021/03/28/%E3%80%90Angular%E3%80%91Angular%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>在<code>ng serve --open</code>后，经过一段时间，<code>Angular</code>应用启动并打开了浏览器，这期间的过程是怎样的呢？<code>Angular</code>是怎样启动的呢？</p><h2 id="由表及里的认识"><a href="#由表及里的认识" class="headerlink" title="由表及里的认识"></a>由表及里的认识</h2><p>我们不妨从表及里，一层一层的拨开它的神秘面纱。</p><p>首先在启动主页<code>F12</code>查看元素，可以看到如下图所示的<code>dom</code>结构。其中<code>app-root</code>这个标签明显不是HTML标签，那它是哪来的，怎么会可以正常挂在上面并显示呢？我们可以去到源码中搜索，发现在index.html中存在这个标签。</p><p><img src="https://z3.ax1x.com/2021/03/28/cpsKdf.png" alt="主页HTML"></p><p>然后根据这个标签就可以找到其对应的是哪个组件的标签。一看，是<code>AppComponent</code>组件的。那又是谁加载的<code>AppComponent</code>组件的呢？一找，原来是<code>app.module.ts</code>在用，<code>app.module.ts</code>对应<code>AppModule</code>又是谁加载的呢？一找，原来是<code>main.ts</code>里的一句话加载了<code>AppModule</code>。<code>platformBrowserDynamic().bootstrapModule()</code>方法貌似是<code>Angular</code>底层代码，走不下去了。我们不妨想想，既然能执行这句话，那肯定是找到了这个<code>main.ts</code>这个文件，哪里用到<code>main.ts</code>了呢？一找，原来是<code>angular.json</code>中配置的一个属性。那谁执行的<code>angular.json</code>呢？不用说了，那就是<code>ng serve</code>了。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">platformBrowserDynamic().bootstrapModule(AppModule)<br> .catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-built_in">console</span>.error(err));<br></code></pre></div></td></tr></table></figure><p><img src="https://z3.ax1x.com/2021/03/28/cpyGtO.png" alt="追踪图"></p><p>至此，我们从页面元素的渲染和dom结构一层一层的往代码里追踪，大概认识了是怎么样的一个流程。而Angular启动过程大概就是倒的顺序。接下来，我们正式从里到外，由里及表的探究Angular的启动过程。</p><h2 id="由里及表的理解"><a href="#由里及表的理解" class="headerlink" title="由里及表的理解"></a>由里及表的理解</h2><ol><li>当你在命令行中输入 ng serve 后</li><li>ng 会根据 <code>angular.json</code> 中的 <code>main</code>元素 找到 应用入口文件<code>main.ts</code></li><li><code>main.ts</code> 再加载 根模块<code>AppModule</code></li><li><code>AppModule</code> 启动<code>Angular</code>模块<code>(@ngModule)</code></li><li><code>@ngModule</code> 为 <code>AppModule</code> 添加元数据,并指定了顶层组件<code>AppComponent</code></li><li><code>AppComponent</code> 中我们就可以为所欲为了</li></ol><p><img src="https://z3.ax1x.com/2021/03/28/cpoN3q.png" alt="启动流程图"></p><h2 id="源码理解"><a href="#源码理解" class="headerlink" title="源码理解"></a>源码理解</h2><p>这部分参考这篇文章吧</p><p><a href="https://zhuanlan.zhihu.com/p/94570685">什么是 Angular Platforms - 深入理解 Angular Platforms 一</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Angular】VS Code开发Angular常用插件集合</title>
    <link href="/2021/03/14/%E3%80%90Angular%E3%80%91VS-Code%E5%BC%80%E5%8F%91Angular%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/"/>
    <url>/2021/03/14/%E3%80%90Angular%E3%80%91VS-Code%E5%BC%80%E5%8F%91Angular%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<p>分享一些我在开发Angular的过程中使用的一些VS Code插件。有些是专门给Angular专门使用的，有些是Web开发通用的插件。</p><h2 id="For-Angular"><a href="#For-Angular" class="headerlink" title="For Angular"></a>For Angular</h2><h3 id="Angular-Snippets-Version-11"><a href="#Angular-Snippets-Version-11" class="headerlink" title=" Angular Snippets (Version 11) "></a><a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2"> Angular Snippets (Version 11) </a></h3><p>此扩展为TypeScript和HTML添加了Angular的代码片段，使用a-*唤醒。Angular开发必装。</p><p><img src="https://s3.ax1x.com/2021/03/13/6wDfv8.gif" alt="Angular Snippets Example"></p><h3 id="Angular-Language-Service"><a href="#Angular-Language-Service" class="headerlink" title="Angular Language Service"></a><a href="https://marketplace.visualstudio.com/items?itemName=Angular.ng-template">Angular Language Service</a></h3><p>Angular开发必装🙋‍♂。</p><p>HTML模板语法提示</p><p><img src="https://s3.ax1x.com/2021/03/13/6wdhTI.png" alt="Angular Language Service Example 1"></p><p>HTML和ts文件的关联提示</p><p><img src="https://s3.ax1x.com/2021/03/13/6wyO2t.gif" alt="Angular Language Service Example 2"></p><h3 id="Angular-Schematics-或-Nx-Console"><a href="#Angular-Schematics-或-Nx-Console" class="headerlink" title="Angular Schematics 或 Nx Console"></a><a href="https://marketplace.visualstudio.com/items?itemName=cyrilletuzi.angular-schematics">Angular Schematics</a> 或 <a href="https://marketplace.visualstudio.com/items?itemName=nrwl.angular-console">Nx Console</a></h3><p>两者都是为了解放Angular开发过程中使用命令的方式生成组件、指令、服务等方式，提供了使用方便的UI界面，丰富的预设选项。同时支持右键选项和全局配置。二者选其一即可。</p><p><img src="https://s3.ax1x.com/2021/03/14/60ylLT.png" alt="Nx Console与Angular Schematics"></p><h3 id="JSON-to-TS"><a href="#JSON-to-TS" class="headerlink" title="JSON to TS"></a><a href="https://marketplace.visualstudio.com/items?itemName=MariusAlchimavicius.json-to-ts">JSON to TS</a></h3><p>在利用typescript开发Angular的过程中，经常会遇到定义的或后端返回的JSON结构数据，前端需要根据JSON结构来定义类和接口。过程会有些繁琐，而这个插件就是解决的这个问题。将复制的JSON文件直接转化成接口定义，非常方便。</p><p><img src="https://s3.ax1x.com/2021/03/14/6BZSNn.png" alt="JSON to ts Example"></p><h2 id="For-Browser"><a href="#For-Browser" class="headerlink" title="For  Browser"></a>For  Browser</h2><p>三大浏览器debugger插件</p><ul><li><h3 id="Debugger-for-Chrome"><a href="#Debugger-for-Chrome" class="headerlink" title="Debugger for Chrome"></a><a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome">Debugger for Chrome</a></h3></li><li><h3 id="Debugger-for-Microsoft-Edge"><a href="#Debugger-for-Microsoft-Edge" class="headerlink" title="Debugger for Microsoft Edge"></a><a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-edge">Debugger for Microsoft Edge</a></h3></li><li><h3 id="Debugger-for-Firefox"><a href="#Debugger-for-Firefox" class="headerlink" title="Debugger for Firefox"></a><a href="https://marketplace.visualstudio.com/items?itemName=firefox-devtools.vscode-firefox-debug">Debugger for Firefox</a></h3></li></ul><h2 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h2><h3 id="Prettier-Code-formatter"><a href="#Prettier-Code-formatter" class="headerlink" title="Prettier - Code formatter"></a><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></h3><p>代码美化插件，支持JavaScript · TypeScript · Flow · JSX · JSONCSS · SCSS · LessHTML · Vue · AngularGraphQL · Markdown · YAML等</p><h3 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></h3><p>Material风格的icon图标主题。</p><p><img src="https://s3.ax1x.com/2021/03/14/604Htf.png" alt="Material Theme Example"></p><h3 id="Todo-Tree"><a href="#Todo-Tree" class="headerlink" title="Todo Tree"></a><a href="https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree">Todo Tree</a></h3><p>这个扩展两大作用：</p><ul><li>可以在注释中高亮TODO，FIXME等</li><li>可以快速搜索（如TODO和FIXME)并在VS Code左树视图中显示。</li></ul><p>日常开发非常实用</p><p><img src="https://s3.ax1x.com/2021/03/14/60INM4.png" alt="TODO Tree"></p><h3 id="Code-Runner"><a href="#Code-Runner" class="headerlink" title="Code Runner"></a><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a></h3><p>如果你需要学习或者接触各种各样的开发语言，那么 Code Runner 插件可以让你不用搭建各种语言的开发环境，直接通过此插件就可以直接运行对应语言的代码，非常适合学习或测试各种开发语言。</p><hr><p>当然实际开发中可能还会有，后续慢慢更新😀</p>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
      <tag>VSCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Angular】Angular常用命令</title>
    <link href="/2021/03/13/%E3%80%90Angular%E3%80%91Angular%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/03/13/%E3%80%90Angular%E3%80%91Angular%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="常用于新建的指令"><a href="#常用于新建的指令" class="headerlink" title="常用于新建的指令"></a>常用于新建的指令</h2><p><strong>ng init</strong> ：在当前目录创建新的应用程序。<br><strong>ng new</strong> ：创建新的目录，然后在新建的目录中运行 ng init 命令。</p><blockquote><p>因此 ng new 与 ng init 的功能是相似的，只是 ng new 会为我们创建新的目录。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ng generate class my-new-class新建 class<br>ng generate component my-new-component 新建组件<br>ng generate directive my-new-directive            新建指令<br>ng generate enum my-new-enum                      新建枚举<br>ng generate module my-new-module                  新建模块<br>ng generate pipe my-new-pipe                      新建管道<br>ng generate service my-new-service                新建服务<br></code></pre></div></td></tr></table></figure><p>可以简写成：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ng g cl my-new-class                              新建 class<br>ng g c my-new-component                           新建组件<br>ng g d my-new-directive                           新建指令<br>ng g e my-new-enum                                新建枚举<br>ng g m my-new-module                              新建模块<br>ng g p my-new-pipe                                新建管道<br>ng g s my-new-service                             新建服务<br></code></pre></div></td></tr></table></figure><p><strong>ng serve</strong>：命令会启动开发服务器，监听文件变化，并在修改这些文件时重新构建此应用。<br>使用–open（或-o）参数可以自动打开浏览器并访问<a href="http://localhost/">http://localhost</a>:4200/。</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">ng serve <span class="hljs-comment">--open</span><br></code></pre></div></td></tr></table></figure><h2 id="构建应用程序"><a href="#构建应用程序" class="headerlink" title="构建应用程序"></a>构建应用程序</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ng build<br></code></pre></div></td></tr></table></figure><p>可用选项：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">--ao<span class="hljs-variable">t:</span> 开启 ahead-of-time 编译,默认开启<br><br>--base-href: <span class="hljs-built_in">string</span>, 设置 <span class="hljs-built_in">index</span>.html 文件中 <span class="hljs-symbol">&lt;base&gt;</span> 元素的链接地址。<br><br>--environmen<span class="hljs-variable">t:</span> <span class="hljs-built_in">string</span>, 设置所使用的环境，默认为 dev。<br><br>--output-path: <span class="hljs-built_in">string</span>, 设置输出的路径。<br><br>--targe<span class="hljs-variable">t:</span> <span class="hljs-built_in">string</span>, 设置所使用的环境，默认为 development。<br><br>--watch: boolean, 默认为 false, 开启 watch 模式，监听文件异动并自动重新构建<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】JavaScript高级程序设计-第五章</title>
    <link href="/2021/03/07/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
    <url>/2021/03/07/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>第五章-引用类型                            </p><a id="more"></a><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>附上本章学习的思维导图，相应的xmind文件和Markdown文件也在下方</p><p><img src="https://s3.ax1x.com/2021/03/07/6MIBo6.png" alt="引用类型"></p><ul><li><a href="http://document.baobaodz.top/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.xmind">引用类型xmind</a></li><li><a href="http://document.baobaodz.top/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.md">引用类型Markdown</a></li></ul><h2 id="补充阅读"><a href="#补充阅读" class="headerlink" title="补充阅读"></a>补充阅读</h2><h3 id="Function类型篇"><a href="#Function类型篇" class="headerlink" title="Function类型篇"></a>Function类型篇</h3><ul><li><a href="https://segmentfault.com/a/1190000018017796">「干货」细说 call、apply 以及 bind 的区别和用法</a></li></ul><h3 id="执行环境及作用域篇"><a href="#执行环境及作用域篇" class="headerlink" title="执行环境及作用域篇"></a>执行环境及作用域篇</h3><ul><li><a href="https://suifengcool.github.io/2020/11/25/Javascript%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/">Javascript执行环境及作用域</a></li><li><a href="https://www.xiaohuochai.site/JS/ECMA/scope/executionContextAndScope.html">深入理解javascript作用域系列第五篇——一张图理解执行环境和作用域</a></li></ul><h3 id="垃圾收集篇"><a href="#垃圾收集篇" class="headerlink" title="垃圾收集篇"></a>垃圾收集篇</h3><ul><li><a href="https://segmentfault.com/a/1190000018605776">前端面试：谈谈 JS 垃圾回收机制</a></li><li><a href="https://zhuanlan.zhihu.com/p/23992332">JavaScript 中的垃圾回收</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Angular】Angular项目目录结构认识</title>
    <link href="/2021/03/06/%E3%80%90Angular%E3%80%91Angular%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%AE%A4%E8%AF%86/"/>
    <url>/2021/03/06/%E3%80%90Angular%E3%80%91Angular%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%AE%A4%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<p>首先我的angular版本为</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">Angular CLI: 11.2.3<br>Node: 12.21.0<br>OS: win32 x64<br></code></pre></div></td></tr></table></figure><h2 id="构建Angular项目"><a href="#构建Angular项目" class="headerlink" title="构建Angular项目"></a>构建Angular项目</h2><p>三步走</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">ng new my-app<br><span class="hljs-built_in">cd</span> my-app<br>ng serve --open<br></code></pre></div></td></tr></table></figure><p>第一步除了生成项目结构目录之外，还需要下载项目构建所需要的的依赖包，也就是node_modules目录，会比较慢。</p><p>之后ng serve –open 自动打开浏览器，看到如下界面表示成功。（顺便说一句，angular cli更新后的编译详情排版较之前清爽许多。但是启动界面比之前又加入了更多的元素）</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">PS G:\Dev\workspace\my-app&gt; ng serve --open<br>√ Browser application bundle generation complete.<br><br>Initial Chunk Files   | Names         |      Size<br>vendor.js             | vendor        |   2.43 MB<br>polyfills.js          | polyfills     | 474.63 kB<br>styles.css, styles.js | styles        | 346.67 kB<br>main.js               | main          |  53.65 kB<br>runtime.js            | runtime       |   6.15 kB<br><br>                      | Initial Total |   3.30 MB<br><br>Build at: 2021-03-06T14:58:29.446Z - Hash: 55fb4e913a3b794cf05a - Time: 6346ms<br><br>** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **<br><br><br>√ Compiled successfully.<br></code></pre></div></td></tr></table></figure><p><img src="https://s3.ax1x.com/2021/03/06/6uD5OH.png" alt="angular启动图"></p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p>xxxxx</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ tree -L 3 -I node_*<br>.<br>|-- README.md<br>|-- angular.json<br>|-- e2e<br>|   |-- protractor.conf.js<br>|   |-- src<br>|   |   |-- app.e2e-spec.ts<br>|   |   `-- app.po.ts<br>|   `-- tsconfig.json<br>|-- karma.conf.js<br>|-- package-lock.json<br>|-- package.json<br>|-- src<br>|   |-- app<br>|   |   |-- app.component.css<br>|   |   |-- app.component.html<br>|   |   |-- app.component.spec.ts<br>|   |   |-- app.component.ts<br>|   |   `-- app.module.ts<br>|   |-- assets<br>|   |-- environments<br>|   |   |-- environment.prod.ts<br>|   |   `-- environment.ts<br>|   |-- favicon.ico<br>|   |-- index.html<br>|   |-- main.ts<br>|   |-- polyfills.ts<br>|   |-- styles.css<br>|   `-- test.ts<br>|-- tsconfig.app.json<br>|-- tsconfig.json<br>|-- tsconfig.spec.json<br>`-- tslint.json<br><br>6 directories, 26 files<br></code></pre></div></td></tr></table></figure><hr><p>首层目录：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">node_modules</span>第三方依赖包存放目录<br><span class="hljs-selector-tag">e2e</span>      端到端的测试目录  用来做自动测试的<br><span class="hljs-selector-tag">src</span>   应用源代码目录  <br><span class="hljs-selector-tag">angular</span><span class="hljs-selector-class">.json</span>         <span class="hljs-selector-tag">Angular</span>命令行工具的配置文件。会引一些其他的第三方的包  比如<span class="hljs-selector-tag">jquery</span>等<br><span class="hljs-selector-tag">karma</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.js</span>  <span class="hljs-selector-tag">karma</span>是单元测试的执行器，<span class="hljs-selector-tag">karma</span><span class="hljs-selector-class">.conf</span><span class="hljs-selector-class">.js</span>是<span class="hljs-selector-tag">karma</span>的配置文件<br><span class="hljs-selector-tag">package</span><span class="hljs-selector-class">.json</span>   这是一个标准的<span class="hljs-selector-tag">npm</span>工具的配置文件，这个文件里面列出了该应用程序所使用的第三方依赖包。实际上我们在新建项目的时候，等了半天就是在下载第三方依赖包。下载完成后会放在<span class="hljs-selector-tag">node_modules</span>这个目录中，后期我们可能会修改这个文件。<br><span class="hljs-selector-tag">package-lock</span><span class="hljs-selector-class">.json</span>   依赖包版本锁定文件<br><span class="hljs-selector-tag">browserslist</span>        配置浏览器兼容性的文件<br><span class="hljs-selector-tag">README</span><span class="hljs-selector-class">.md</span>           说明文件<br><span class="hljs-selector-tag">tsconfig</span><span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.json</span>   <span class="hljs-selector-tag">app</span>项目的<span class="hljs-selector-tag">TypeScript</span>的配置文件<br><span class="hljs-selector-tag">tsconfig</span><span class="hljs-selector-class">.json</span>       整个工作区的<span class="hljs-selector-tag">TypeScript</span>配置文件<br><span class="hljs-selector-tag">tsconfig</span><span class="hljs-selector-class">.spec</span><span class="hljs-selector-class">.json</span>  用于测试的<span class="hljs-selector-tag">TypeScript</span>配置文件<br><span class="hljs-selector-tag">tslint</span><span class="hljs-selector-class">.json</span>         <span class="hljs-selector-tag">TypeScript</span>的代码静态扫描配置，用来定义<span class="hljs-selector-tag">TypeScript</span>代码质量检查的规则    <br><span class="hljs-selector-class">.editorconfig</span>       不同编译器统一代码风格<br><span class="hljs-selector-class">.gitignore</span>          <span class="hljs-selector-tag">git</span>中的忽略文件列表<br><br></code></pre></div></td></tr></table></figure><p>src目录：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">app目录  包含应用的组件和模块，我们要写的代码都在这个目录<br>assets目录    资源目录，存储静态资源的  比如图片<br>environments目录     环境配置。Angular是支持多环境开发的，我们可以在不同的环境下（开发环境，测试环境，生产环境）共用一套代码，主要用来配置环境的<br>index.html  整个应用的根html，程序启动就是访问这个页面<br>main.ts    整个项目的入口点，Angular通过这个文件来启动项目<br>polyfills.ts   主要是用来导入一些必要库，为了让Angular能正常运行在老版本下<br>styles.css   主要是放一些全局的样式<br>tsconfig.app.jsonTypeScript编译器的配置,添加第三方依赖的时候会修改这个文件<br>tsconfig.spec.json不用管<br>test.ts    也是自动化测试用的<br>typings.d.ts        不用管<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Angular】一次升级node并卸载angular的记录</title>
    <link href="/2021/03/04/%E3%80%90Angular%E3%80%91%E4%B8%80%E6%AC%A1%E5%8D%87%E7%BA%A7node%E5%B9%B6%E5%8D%B8%E8%BD%BDangular%E7%9A%84%E8%AE%B0%E5%BD%95/"/>
    <url>/2021/03/04/%E3%80%90Angular%E3%80%91%E4%B8%80%E6%AC%A1%E5%8D%87%E7%BA%A7node%E5%B9%B6%E5%8D%B8%E8%BD%BDangular%E7%9A%84%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><code>ng -v</code>报错</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev<br>$ ng -v<br>Node.js version v11.0.0 detected.<br>The Angular CLI requires a minimum Node.js version of either v10.13 or v12.0.<br><br>Please update your Node.js version or visit https://nodejs.org/ <span class="hljs-keyword">for</span> additional instructions.<br></code></pre></div></td></tr></table></figure><p>说<code>Angular CLI</code>需要的最小版本的<code>node.js</code>要么是<code>v10.13</code>要么是<code>v12.0</code>，咋滴，看不起<code>11</code>的啊？网上一看，哦原来</p><blockquote><p>Angular CLI requires a current, active LTS, or maintenance LTS version of Node (<a href="https://angular.io/guide/setup-local#nodejs">https://angular.io/guide/setup-local#nodejs</a>). which version 11 isn’t.</p><p>Node.JS 11 is no longer supported by the Node.Js team as after six months, odd-numbered releases (9, 11, etc.) become unsupported. More info: <a href="https://nodejs.org/en/about/releases">https://nodejs.org/en/about/releases</a></p></blockquote><p>好吧，想当初不知道为啥下了个不稳定版的。</p><p><code>ok</code>那就升级呗。</p><h3 id="升级node"><a href="#升级node" class="headerlink" title="升级node"></a>升级node</h3><p><code>windows</code>上升级<code>node.js</code>也很简单，但是稍不留意就容易被网上教程误导。得，我就被误导了。</p><p>正确走法</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">第一步：打开cmd查看之前的<span class="hljs-keyword">node</span><span class="hljs-title">版本安装的路径： where</span> <span class="hljs-keyword">node</span><span class="hljs-title"></span><br><span class="hljs-title">第二步：直接去官网下载你想要的版本，安装在上述路径中覆盖即可。</span><br><span class="hljs-title">第三步： node</span> -v 发现<span class="hljs-keyword">node</span><span class="hljs-title">版本更新到你想要的版本。</span><br></code></pre></div></td></tr></table></figure><p>因为之前配置过环境变量，所以就省去了配置环境变量的步骤。</p><p>具体步骤可参考 </p><p><a href="https://blog.csdn.net/Small_Yogurt/article/details/104968169">https://blog.csdn.net/Small_Yogurt/article/details/104968169</a></p><p>如果是<code>windows</code>，就别用什么 安装n模块，<code>npm install -g n --force</code>  n latest 什么的 ，因为那玩意只对linux上有用！</p><h3 id="卸载angular"><a href="#卸载angular" class="headerlink" title="卸载angular"></a>卸载angular</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm uninstall -g @angualr/cli<br><br>npm cache clean<br><br>在npm全局的node_modules中找到@angular文件夹删掉<br><br>找到node_modules上一级的目录中找到ng/ng.cmd<br></code></pre></div></td></tr></table></figure><h3 id="安装angular"><a href="#安装angular" class="headerlink" title="安装angular"></a>安装angular</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">npm install -g @angular/cli<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
      <tag>node</tag>
      
      <tag>问题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】JavaScript高级程序设计-第四章</title>
    <link href="/2021/02/17/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <url>/2021/02/17/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>附上本章学习的思维导图</p><p><img src="https://s3.ax1x.com/2021/02/17/y20VAA.png" alt="变量、作用域和内存问题"></p><h2 id="补充阅读"><a href="#补充阅读" class="headerlink" title="补充阅读"></a>补充阅读</h2><h3 id="基本类型和引用类型篇"><a href="#基本类型和引用类型篇" class="headerlink" title="基本类型和引用类型篇"></a>基本类型和引用类型篇</h3><ul><li><a href="https://learnku.com/articles/38192">JavaScript - 基本类型与引用类型值</a></li></ul><h3 id="执行环境及作用域篇"><a href="#执行环境及作用域篇" class="headerlink" title="执行环境及作用域篇"></a>执行环境及作用域篇</h3><ul><li><a href="https://suifengcool.github.io/2020/11/25/Javascript%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/">Javascript执行环境及作用域</a></li><li><a href="https://www.xiaohuochai.site/JS/ECMA/scope/executionContextAndScope.html">深入理解javascript作用域系列第五篇——一张图理解执行环境和作用域</a></li></ul><h3 id="垃圾收集篇"><a href="#垃圾收集篇" class="headerlink" title="垃圾收集篇"></a>垃圾收集篇</h3><ul><li><a href="https://segmentfault.com/a/1190000018605776">前端面试：谈谈 JS 垃圾回收机制</a></li><li><a href="https://zhuanlan.zhihu.com/p/23992332">JavaScript 中的垃圾回收</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】引爆执行力</title>
    <link href="/2021/02/17/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91%E5%BC%95%E7%88%86%E6%89%A7%E8%A1%8C%E5%8A%9B/"/>
    <url>/2021/02/17/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91%E5%BC%95%E7%88%86%E6%89%A7%E8%A1%8C%E5%8A%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://s3.ax1x.com/2021/02/17/y2nJYR.png" alt="image.png"></p><p><img src="https://s3.ax1x.com/2021/02/17/y2nNSx.png" alt="image.png"></p><h1 id="怎么才能引爆执行力（执行力体系）"><a href="#怎么才能引爆执行力（执行力体系）" class="headerlink" title="怎么才能引爆执行力（执行力体系）"></a>怎么才能引爆执行力（执行力体系）</h1><h2 id="跳出执行力误区"><a href="#跳出执行力误区" class="headerlink" title="跳出执行力误区"></a>跳出执行力误区</h2><h3 id="误区一：持续拖延"><a href="#误区一：持续拖延" class="headerlink" title="误区一：持续拖延"></a>误区一：持续拖延</h3><h3 id="误区二：DDL魔咒"><a href="#误区二：DDL魔咒" class="headerlink" title="误区二：DDL魔咒"></a>误区二：DDL魔咒</h3><h3 id="误区三：无从下手"><a href="#误区三：无从下手" class="headerlink" title="误区三：无从下手"></a>误区三：无从下手</h3><h3 id="误区四：不分轻重缓急"><a href="#误区四：不分轻重缓急" class="headerlink" title="误区四：不分轻重缓急"></a>误区四：不分轻重缓急</h3><h3 id="误区五：想的简单，做起来难"><a href="#误区五：想的简单，做起来难" class="headerlink" title="误区五：想的简单，做起来难"></a>误区五：想的简单，做起来难</h3><h3 id="误区六：精力不充沛，一干活就累"><a href="#误区六：精力不充沛，一干活就累" class="headerlink" title="误区六：精力不充沛，一干活就累"></a>误区六：精力不充沛，一干活就累</h3><h2 id="避开执行力陷阱"><a href="#避开执行力陷阱" class="headerlink" title="避开执行力陷阱"></a>避开执行力陷阱</h2><h3 id="陷阱一：不靠谱，做事慢"><a href="#陷阱一：不靠谱，做事慢" class="headerlink" title="陷阱一：不靠谱，做事慢"></a>陷阱一：不靠谱，做事慢</h3><h3 id="陷阱二：什么都想做，什么都做不好"><a href="#陷阱二：什么都想做，什么都做不好" class="headerlink" title="陷阱二：什么都想做，什么都做不好"></a>陷阱二：什么都想做，什么都做不好</h3><h3 id="陷阱三：被同龄人抛弃"><a href="#陷阱三：被同龄人抛弃" class="headerlink" title="陷阱三：被同龄人抛弃"></a>陷阱三：被同龄人抛弃</h3><h3 id="陷阱四：忽视负面情绪"><a href="#陷阱四：忽视负面情绪" class="headerlink" title="陷阱四：忽视负面情绪"></a>陷阱四：忽视负面情绪</h3><h2 id="掌控执行力逻辑"><a href="#掌控执行力逻辑" class="headerlink" title="掌控执行力逻辑"></a>掌控执行力逻辑</h2><h3 id="逻辑一：成为真正靠谱的执行者"><a href="#逻辑一：成为真正靠谱的执行者" class="headerlink" title="逻辑一：成为真正靠谱的执行者"></a>逻辑一：成为真正靠谱的执行者</h3><p>事事有交代，事事有回应；<br>给与准确的承诺，切且承诺的一定会做到；<br>如果发生不可控的意外情况，会提前通知相关人士，并尽力采取补救措施；<br>遇到困难，多思考，少抱怨。</p><h3 id="逻辑二：执行力的关键在于行动"><a href="#逻辑二：执行力的关键在于行动" class="headerlink" title="逻辑二：执行力的关键在于行动"></a>逻辑二：执行力的关键在于行动</h3><p>行动困难有哪些原因？<br>懒惰<br>不擅长时间管理<br>效率低下<br>对后果的认知不足</p><ul><li><p>行动困难有哪些原因？</p><ul><li>懒惰</li><li>不擅长时间管理</li><li>效率低下</li><li>对后果的认知不足</li></ul></li><li><p>如何找到行动的意愿？</p><ul><li>情感——因为热爱</li><li>利益——因为需要</li><li>成就——因为价值</li></ul></li></ul><h3 id="逻辑三：具备解决问题的能力"><a href="#逻辑三：具备解决问题的能力" class="headerlink" title="逻辑三：具备解决问题的能力"></a>逻辑三：具备解决问题的能力</h3><h2 id="重塑执行力思维"><a href="#重塑执行力思维" class="headerlink" title="重塑执行力思维"></a>重塑执行力思维</h2><h3 id="思维一：给自己一个开始的理由"><a href="#思维一：给自己一个开始的理由" class="headerlink" title="思维一：给自己一个开始的理由"></a>思维一：给自己一个开始的理由</h3><ul><li><p>工作前的仪式感</p><p>做完某件事，就开始工作<br>例如收拾完桌面就开始工作。</p></li><li><p>第一项任务的重要性</p><p>每天工作开始时的第一项任务，最好可以满足三个特征：<br>难度不高，容易完成<br>能够快速形成第一个正面激励<br>能够为后面的工作做铺垫</p></li></ul><h3 id="思维二：摒弃干扰，凝聚精力"><a href="#思维二：摒弃干扰，凝聚精力" class="headerlink" title="思维二：摒弃干扰，凝聚精力"></a>思维二：摒弃干扰，凝聚精力</h3><ul><li>营造舒适的环境</li><li>远离干扰你的人</li><li>与自律者为伴</li><li>拒绝无效社交</li></ul><h3 id="思维三：持续反馈，正向激励"><a href="#思维三：持续反馈，正向激励" class="headerlink" title="思维三：持续反馈，正向激励"></a>思维三：持续反馈，正向激励</h3><ul><li><p>坚持复盘</p><ul><li><p>正面总结</p><p>做的好与不好评价标准可以参考<br>效率高<br>准确度或正确度高<br>评价者的满意度高</p></li><li><p>负面反思</p><p>没做好无外乎以下几点：<br>没做<br>做错了<br>没到位<br>反思预期与所做的之间的差距。</p></li></ul></li><li><p>准备阶梯奖励</p></li></ul><h2 id="执行力突围"><a href="#执行力突围" class="headerlink" title="执行力突围"></a>执行力突围</h2><h3 id="突围技能一：摆脱焦虑"><a href="#突围技能一：摆脱焦虑" class="headerlink" title="突围技能一：摆脱焦虑"></a>突围技能一：摆脱焦虑</h3><h3 id="突围技能二：成为最优主义者"><a href="#突围技能二：成为最优主义者" class="headerlink" title="突围技能二：成为最优主义者"></a>突围技能二：成为最优主义者</h3><p>避免成为个完美主义者。<br>最优主义者往往有以下特征：<br>承认自己的不足之处，不对自己要求过高；<br>遇到瓶颈先跳过；<br>修正错误就像修改漏洞；<br>每一次解决问题都是自我成长</p><h3 id="突围技能三：时间管理术"><a href="#突围技能三：时间管理术" class="headerlink" title="突围技能三：时间管理术"></a>突围技能三：时间管理术</h3><p>给任务做减法，聚焦于20%的核心任务<br>日常模块化<br>CSDA进度管理法<br>        计算-移动-分解-达成计算完成任务需要的时间，然后把DDL往前挪一点，在分解任务目标，最后逐一攻破</p><h3 id="突围技能四：精力管理"><a href="#突围技能四：精力管理" class="headerlink" title="突围技能四：精力管理"></a>突围技能四：精力管理</h3><p>身体管理的简易法则：<br>阶段休息法（番茄钟工作法）<br>冥想法<br>午休法<br>泡澡法<br>心理管理：学会抗压</p><h2 id="引爆执行力"><a href="#引爆执行力" class="headerlink" title="引爆执行力"></a>引爆执行力</h2><h3 id="塑造产品思维"><a href="#塑造产品思维" class="headerlink" title="塑造产品思维"></a>塑造产品思维</h3><h3 id="培养优先级发展"><a href="#培养优先级发展" class="headerlink" title="培养优先级发展"></a>培养优先级发展</h3><h3 id="构建结果导向型思维"><a href="#构建结果导向型思维" class="headerlink" title="构建结果导向型思维"></a>构建结果导向型思维</h3><p>结果导向型思维是什么，有什么特征？<br>• 以完成目标、达到结果为原则。<br>• 行动步骤依据结果来制定，为结果而服务。<br>• 不因过程的艰难而自我感动。<br>• 无论有什么特殊原因，没有达到既定目标，就是自己的责任。<br>• 有一个衡量结果的客观标准。<br>总结一下：一切以结果为前提，充分考虑各种变量，为达到想要<br>的结果而制订计划。</p><ul><li>摆正心态：一切以结果为前提</li><li>正向突围：围绕正确的结果制订计划</li><li>反向逆推：用结果纠正行为</li></ul><h3 id="发挥优势，改变劣势"><a href="#发挥优势，改变劣势" class="headerlink" title="发挥优势，改变劣势"></a>发挥优势，改变劣势</h3><ul><li><p>找到你的优势所在</p><p>在这个寻找优势的过程中，还有一个公式值得你参考：<br>优势=（天赋+知识+技能）×投入时间。<br>• 天赋：你天生就擅长、做起来比别人更快更好的事情。例如，有些人天生就有绝对音准，在学习音乐方面就比常人要容易许多。<br>• 知识：你额外学习的、前人总结的知识经验。如果是在你的天赋领域，你可能对这些知识会学得更快，或者更深入，这是深挖你天赋的过程；也有些人，可能天赋并不算突出，但从小就对某一方面的知识进行深入学习，有着大量的知识储备，那他在这一领域也会具备一定优势。<br>• 技能：你所掌握的一门方法。比如说，绘画的方法、编程的方法、说服他人的方法等等。<br>将这三者相结合，并持续投入时间加以训练的同时，积累大量的实战经验，便最终形成了你的优势。</p></li><li><p>发挥优势的FREE法则</p><p>专注（focus）、放手（release）、教育（education）、拓展（expand）。<br>FREE法则就是专注于发挥自己的优势，放弃那些我们不太擅长的事情，通过不断的学习来拓展我们在相关领域的深度，并最终拓展我们人生的广度。</p></li><li><p>检验行动的KISS计划</p><p>保持（keep）、提升（improve）、开始（start）、停止（stop）。<br>• 保持：过去做得好的、顺手的、让你感觉到有积极反馈的，就持续下去，保持这种让你舒服的节奏，亦保持度高效率、高品质的输出。<br>• 提升：确认是你所擅长领域的内容，但因为你目前一些知识和技能上的欠缺，做得不够优秀、不够有效率，那你便要想办法做出优化和提升。<br>• 开始：你的优势还没有被发挥出来，那就去更多地寻找能发挥出你优势的事情，开始尝试着去优化任务分配。<br>• 停止：那些浪费了你太多时间却做不好的事，或者你尝试了学习和优化，但依旧做起来很低效的事情，那不妨停下来不去做，交给更擅长、更适合的人。</p></li><li><p>把事情交给擅长的人</p><p>这其中包含两点：<br>• 把专业的事情交给专业人士去解决。<br>• 把琐碎的工作交给效能人士去解决。</p></li></ul><h3 id="优化合作，突破大潜能"><a href="#优化合作，突破大潜能" class="headerlink" title="优化合作，突破大潜能"></a>优化合作，突破大潜能</h3><ul><li><p>找到你的“大潜能”</p><p>大潜能=个人特征×（积极影响–消极影响）。</p></li><li><p>大潜能的SEEDS原则</p><p>包围（surround）、赋能（expand）、巩固<br>（enhance）、对抗（defend）和维持（sustain）。<br>• 包围：被积极的影响者包围。让积极的影响者潜移默化地影响你，帮助你成为更好、更优秀的自己。<br>• 赋能：赋能他人，成为积极的影响者。你要主动为他人带来好的影响，从而在团队内部形成良性循环。<br>• 巩固：赞美他人以巩固资源。不要吝啬你的赞美，你的肯定、支持和鼓励，往往能给整个团队带来意想不到的效果。<br>• 对抗：抵抗负面情绪。为自己构建一个能够抵御外界负面状况的防御系统。<br>• 维持：维持潜能增长。大潜能没有上限，前面四步都在帮助你不断提高上限，所以你要维持住这个增长的趋势。</p></li></ul><h3 id="精准执行，高效赋能"><a href="#精准执行，高效赋能" class="headerlink" title="精准执行，高效赋能"></a>精准执行，高效赋能</h3>]]></content>
    
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】JavaScript高级程序设计-第三章</title>
    <link href="/2021/02/06/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <url>/2021/02/06/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p>附上学习的思维导图</p><p><img src="https://s3.ax1x.com/2021/02/06/ytEzKH.png" alt="基本概念"></p><h2 id="补充阅读"><a href="#补充阅读" class="headerlink" title="补充阅读"></a>补充阅读</h2><p>语法篇</p><ul><li><a href="http://www.ruanyifeng.com/blog/2010/01/12_javascript_syntax_structures_you_should_not_use.html">12种不宜使用的Javascript语法</a></li></ul><p>数据类型篇</p><ul><li><a href="https://draveness.me/whys-the-design-floating-point-arithmetic/">为什么 0.1 + 0.2 = 0.300000004</a></li></ul><p>原始类型篇</p><ul><li><a href="https://www.zhangxinxu.com/wordpress/2018/04/known-es6-symbol-function/">简单了解ES6/ES2015 Symbol() 方法</a></li><li><a href="https://juejin.cn/post/6844903795797786632">JavaScript 中的表示任意精度的 BigInt</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【读书笔记】JavaScript高级程序设计</title>
    <link href="/2021/01/31/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2021/01/31/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><p><img src="https://s3.ax1x.com/2021/01/31/yE3zz6.png" alt="image.png"></p><h2 id="defer和async的区别"><a href="#defer和async的区别" class="headerlink" title="defer和async的区别"></a>defer和async的区别</h2><p>《JavaScript高级程序设计》中对于defer和async的区别这样解释：</p><p>defer</p><blockquote><p>这个属性的用途是表明脚本在执行时不会影响页面的构造。也就是说，脚本会被延迟到整个页面都解析完毕后再运行。因此，在``元素中设置<code>defer</code>属性，相当于告诉浏览器立即下载，但延迟执行。</p><p>HTML5规范要求脚本按照它们出现的先后顺序执行，因此第一个延迟脚本会先于第二个延迟脚本执行，而这两个脚本会先于<code>DOMContentLoaded</code>事件执行。<strong>在现实当中</strong>，延迟脚本并不一定会按照顺序执行，也不一定会在<code>DOMContentLoad</code>时间触发前执行，因此最好只包含一个延迟脚本。</p></blockquote><p>async</p><blockquote><p>这个属性与<code>defer</code>类似，都用于改变处理脚本的行为。同样与<code>defer</code>类似，<code>async</code>只适用于外部脚本文件，并告诉浏览器立即下载文件。但与<code>defer</code>不同的是，标记为<code>async</code>的脚本并不保证按照它们的先后顺序执行。</p><p>第二个脚本文件可能会在第一个脚本文件之前执行。因此确保两者之间互不依赖非常重要。指定<code>async</code>属性的目的是不让页面等待两个脚本下载和执行，从而异步加载页面其他内容。</p></blockquote><p>上图</p><p><img src="https://s3.ax1x.com/2021/01/31/yV9GUH.png" alt="image.png"></p><p>总结下来就是</p><ul><li>单个带async属性的外部js文件：异步加载，立即执行</li><li>单个带defer属性的外部js文件：异步加载，延迟执行</li><li>多个带async属性或defer属性的外部js文件之间：执行都没有顺序</li></ul><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><ul><li><p>加载其实就是下载js的意思</p></li><li><p>DOMContentLoaded事件，页面文档完全加载并解析完毕之后，会触发DOMContentLoaded事件 </p><p>结合DOM文档加载的加载步骤，DOMContentLoaded事件/Load事件，触发时机如下：<br> 1、解析HTML结构。<br> 2、加载外部脚本和样式表文件。<br> 3、解析并执行脚本代码。// 部分脚本会阻塞页面的加载<br> 4、DOM树构建完成。//DOMContentLoaded 事件<br> 5、加载图片等外部文件。<br> 6、页面加载完毕。//load 事件</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>输出出现次数最多的整数及其出现次数</title>
    <link href="/2020/05/15/The-most-frequent-integers-and-times/"/>
    <url>/2020/05/15/The-most-frequent-integers-and-times/</url>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><p>输入一组无序的整数，编程输出其中出现次数最多的整数及其出现次数。</p><h4 id="【输入形式】"><a href="#【输入形式】" class="headerlink" title="【输入形式】"></a>【输入形式】</h4><p>先从标准输入读入整数的个数（大于等于1，小于等于100），然后在下一行输入这些整数，各整数之间以一个空格分隔。</p><h4 id="【输出形式】"><a href="#【输出形式】" class="headerlink" title="【输出形式】"></a>【输出形式】</h4><p>在标准输出上输出出现次数最多的整数及其出现次数，两者以一个空格分隔；若出现次数最多的整数有多个，则按照整数升序分行输出。</p><h4 id="【样例输入】"><a href="#【样例输入】" class="headerlink" title="【样例输入】"></a>【样例输入】</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-number">10</span><br><span class="hljs-symbol">0 </span>-<span class="hljs-number">50</span> <span class="hljs-number">0</span> <span class="hljs-number">632</span> <span class="hljs-number">5813</span> -<span class="hljs-number">50</span> <span class="hljs-number">9</span> -<span class="hljs-number">50</span> <span class="hljs-number">0</span> <span class="hljs-number">632</span><br></code></pre></div></td></tr></table></figure><h4 id="【样例输出】"><a href="#【样例输出】" class="headerlink" title="【样例输出】"></a>【样例输出】</h4><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-50 3</span><br>0 3<br></code></pre></div></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以边输入边获取值存入数组，也可输入完毕后一并获取整行数据存进数组。</p><p>用<code>TreeMap</code>存放<code>key</code>为输入的值，<code>value</code>为该值出现的次数；而且<code>TreeMap</code>的<code>key</code>默认升序的</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    Scanner in = <span class="hljs-keyword">new</span> Scanner(System.in);<br>    <span class="hljs-keyword">int</span> num = in.nextInt();<br>    <span class="hljs-keyword">int</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[num];<br>    <span class="hljs-keyword">int</span> Max = <span class="hljs-number">0</span>;<br>    Map&lt;Integer,Integer&gt; max = <span class="hljs-keyword">new</span> TreeMap&lt;&gt;();<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt; num; i++) &#123;<br>        data[i] = in.nextInt();<br><br>        <span class="hljs-keyword">if</span>(!max.containsKey(data[i])) &#123;<br>            max.put(data[i], <span class="hljs-number">0</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            max.put(data[i], max.get(data[i]) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//System.out.println(max);</span><br>        Max = Max &gt; max.get(data[i]) ? Max : max.get(data[i]);<br>    &#125;<br><br>    Iterator&lt;Integer&gt; iter = max.keySet().iterator();<br>    <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>        Integer key = iter.next();<br>        <span class="hljs-keyword">if</span>(max.get(key) == Max)&#123;<br>            System.out.println(key + <span class="hljs-string">&quot; &quot;</span> + max.get(key));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多项式相加问题的设计与实现方法</title>
    <link href="/2020/05/02/Design-and-implementation-of-polynomial-addition-problem/"/>
    <url>/2020/05/02/Design-and-implementation-of-polynomial-addition-problem/</url>
    
    <content type="html"><![CDATA[<h3 id="多项式相加问题的设计与实现方法"><a href="#多项式相加问题的设计与实现方法" class="headerlink" title="多项式相加问题的设计与实现方法"></a>多项式相加问题的设计与实现方法</h3><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="【问题描述】"><a href="#【问题描述】" class="headerlink" title="【问题描述】"></a>【问题描述】</h4><p>一个多项式可以表达为x的各次幂与系数乘积的和，比如：</p><p><code>2x6+3x5+12x3+6x+20</code></p><p>也就是对应数学中的<br>$$<br>2x^6+3x^5+12x^3+6x+20<br>$$<br>现在，你的程序要读入两个多项式，然后输出这两个多项式的和，也就是把对应的幂上的系数相加然后输出。</p><p>程序要处理的幂最大为100。</p><h4 id="【输入形式】"><a href="#【输入形式】" class="headerlink" title="【输入形式】"></a>【输入形式】</h4><p>总共要输入两个多项式，每个多项式的输入格式如下：</p><p>每行输入两个数字，第一个表示幂次，第二个表示该幂次的系数，所有的系数都是整数。第一行一定是最高幂，最后一行一定是0次幂。注意：第一行和最后一行之间不一定按照幂次降低顺序排列；如果某个幂次的系数为0，就不出现在输入数据中了；0次幂的系数为0时还是会出现在输入数据中。</p><h4 id="【输出形式】"><a href="#【输出形式】" class="headerlink" title="【输出形式】"></a>【输出形式】</h4><p>从最高幂开始依次降到0幂，如：</p><p><code>2x6+3x5+12x3-6x+20</code></p><p>注意其中的x是小写字母x，而且所有的符号之间都没有空格，如果某个幂的系数为0则不需要有那项。</p><h4 id="【样例输入】"><a href="#【样例输入】" class="headerlink" title="【样例输入】"></a>【样例输入】</h4><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">6 </span><span class="hljs-number">2</span><br><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">12</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">20</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">2</span> <br><span class="hljs-symbol">5 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">12</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">6</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">20</span><br></code></pre></div></td></tr></table></figure><h4 id="【样例输出】"><a href="#【样例输出】" class="headerlink" title="【样例输出】"></a>【样例输出】</h4><p>  <code>4x6+6x5+12x3+12x2+12x+40</code></p><h4 id="【评分标准】"><a href="#【评分标准】" class="headerlink" title="【评分标准】"></a>【评分标准】</h4><p>要求：将多项式中的项设计为<code>Item</code>类，多项式设计为<code>Polyomial</code>类，设计类时要体现多项式和项是一对多的关系。<code>Polyomial</code>类中提供<code>public  Polyomial  add(Polyomial  other)</code>方法完成两个多项式的相加，返回两者和。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>多项式相加，也就是相同幂次的系数项相加，按照一定格式输出</li><li>面向对象的方法设计，项类（<code>Item</code>）和多项式类（<code>Polyomial</code>）</li><li>主要三部分实现：类设计（属性，方法）；控制台输入控制（最高幂次不超过100,0系数不输入）；控制台输出显示（0次幂的处理，加减号处理）。</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h4><p><code>Item</code>类：</p><p>实现了<code>Comparable</code>接口，重写比较方法，用于根据系数排序（最后输出用到）；</p><p>属性<code>power</code>幂次和<code>coefficient</code>系数；</p><p>方法<code>addItem(Item otherItem)</code>用于项与项之间系数相加；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Item</span>&gt;</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> power; <span class="hljs-comment">//幂次</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> coefficient; <span class="hljs-comment">//系数</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPower</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> power;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPower</span><span class="hljs-params">(<span class="hljs-keyword">int</span> power)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.power = power;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCoefficient</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> coefficient;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCoefficient</span><span class="hljs-params">(<span class="hljs-keyword">int</span> coefficient)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.coefficient = coefficient;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Item</span><span class="hljs-params">(<span class="hljs-keyword">int</span> power, <span class="hljs-keyword">int</span> coefficient)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.power = power;<br>        <span class="hljs-keyword">this</span>.coefficient = coefficient;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Item</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Item&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;power=&quot;</span> + power +<br>                <span class="hljs-string">&quot;, coefficient=&quot;</span> + coefficient +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Item <span class="hljs-title">addItem</span><span class="hljs-params">(Item otherItem)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> coeff = <span class="hljs-keyword">this</span>.coefficient + otherItem.coefficient;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Item(<span class="hljs-keyword">this</span>.power,coeff);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Item otherItem)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.power &lt; otherItem.getPower()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p><code>Polyomial</code>类</p><p>属性<code>items</code>，用<code>List&lt;Item&gt;</code>体现项与多项式之间的多对一的关系；</p><p>公共方法<code>add(Polyomial otherPolyomial)</code>用于两个多项式相加；<code>selfAdd()</code>方法多项式自身去重相加；</p><p>根据题意</p><blockquote><p>第一行一定是最高幂，最后一行一定是0次幂。注意：第一行和最后一行之间不一定按照幂次降低顺序排列；</p></blockquote><p>可以得知两点</p><p>1）单个多项式的系数是杂乱的需要对其系数排序（<code>Item</code>类安排）</p><p>2）单个多项式的系数存在重复相同的可能，需要在两个多项式相加之前先对单个进行去重相加，从而增加<code>selfAdd()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Polyomial</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Item&gt; items;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Item&gt; <span class="hljs-title">getItems</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> items;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setItems</span><span class="hljs-params">(List&lt;Item&gt; items)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.items = items;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Polyomial</span><span class="hljs-params">(List&lt;Item&gt; items)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.items = items;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Polyomial&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;items=&quot;</span> + items +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//多项式相加</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Polyomial <span class="hljs-title">add</span><span class="hljs-params">(Polyomial otherPolyomial)</span></span>&#123;<br>        List&lt;Item&gt; items = <span class="hljs-keyword">this</span>.items;<br>        List&lt;Item&gt; deduplicatedItems = <span class="hljs-keyword">new</span> ArrayList&lt;Item&gt;(<span class="hljs-keyword">this</span>.items);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;deduplicatedItems.size();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;otherPolyomial.items.size();j++)&#123;<br>                <span class="hljs-keyword">if</span>(deduplicatedItems.get(i).getPower() == otherPolyomial.items.get(j).getPower())&#123;<br>                    deduplicatedItems.set(i,items.get(i).addItem(otherPolyomial.items.get(j)));<br>                    otherPolyomial.items.remove(j--);<br>                &#125;<br>            &#125;<br>        &#125;<br>        deduplicatedItems.addAll(otherPolyomial.items);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Polyomial(deduplicatedItems);<br>    &#125;<br><br>    <span class="hljs-comment">//自身先去重相加</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selfAdd</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> size = <span class="hljs-keyword">this</span>.getItems().size();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i+<span class="hljs-number">1</span>;j&lt;size;j++)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.getItems().get(i).getPower() == <span class="hljs-keyword">this</span>.getItems().get(j).getPower())&#123;<br>                    <span class="hljs-keyword">this</span>.getItems().set(i,<span class="hljs-keyword">this</span>.getItems().get(i).addItem(<span class="hljs-keyword">this</span>.getItems().get(j)));<br>                    <span class="hljs-keyword">this</span>.getItems().remove(j--);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h4 id="输入处理"><a href="#输入处理" class="headerlink" title="输入处理"></a>输入处理</h4><p>输入这块是我比较头疼的地方，主要是确认哪些地方需要程序控制以及应该怎样控制。仔细审题</p><blockquote><p>程序要处理的幂最大为100。</p></blockquote><blockquote><p>每行输入两个数字，第一个表示幂次，第二个表示该幂次的系数，所有的系数都是整数。第一行一定是最高幂，最后一行一定是0次幂。注意：第一行和最后一行之间不一定按照幂次降低顺序排列；如果某个幂次的系数为0，就不出现在输入数据中了；0次幂的系数为0时还是会出现在输入数据中。</p></blockquote><p>题意要求每行输入两个数字，输入三个数字该怎么办？</p><p>题意要求所有系数应该为整数，那输入的系数为小数怎么办？</p><p>题意要求第一行为最高幂，那后面输入比最高幂高的幂了该怎么办？</p><p>这些如果交给程序控制也可以，不符合格式要求直接打印提示语句退出。但是我认为以上这些都交给人来输入控制吧，而且吧题目中也没有对应的报错信息，这么多事儿干嘛？</p><p>当然也有我认为需要程序控制的地方，比如程序可以处理最大幂为100；不能输入系数为0 </p><p>确定了程序控制哪些地方，那是输入时控制还是输入完毕的时候控制呢？…….</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Scanner scanner = <span class="hljs-keyword">new</span> Scanner(System.in);<br>List&lt;Item&gt; inputitems = <span class="hljs-keyword">new</span> ArrayList&lt;Item&gt;();<br>String nextLine = scanner.nextLine();<br><span class="hljs-keyword">while</span> (nextLine != <span class="hljs-keyword">null</span> &amp;&amp; !nextLine.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>    <span class="hljs-keyword">if</span>(Integer.parseInt(nextLine.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">0</span>]) &gt; <span class="hljs-number">100</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;power over 100 does not support!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(Integer.parseInt(nextLine.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">1</span>]) == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;coefficient 0 should not be inputed!&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    inputitems.add(<span class="hljs-keyword">new</span> Item(Integer.parseInt(nextLine.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">0</span>]),Integer.parseInt(nextLine.split(<span class="hljs-string">&quot; &quot;</span>)[<span class="hljs-number">1</span>])));<br>    nextLine = scanner.nextLine();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我选择输入时控制，及时提示及时退出；因为每一多项式最后一行幂次必定为0，但是也存在之间也有0次幂时这种可能，因此不能边输入边获取值，必须输入完毕后获取数据，因此要给个输入完毕的指令；这里我设计为不输入按下回车表示两个多项式系数幂次输入完毕，对应代码中<code>while (nextLine != null &amp;&amp; !nextLine.equals(&quot;&quot;))</code>条件判断；输入的数据存储到<code>inputitems</code>中。</p><h4 id="输出处理"><a href="#输出处理" class="headerlink" title="输出处理"></a>输出处理</h4><p>这一部分主要是将输入获取的数据分割成两个多项式，调用方法实现多项式相加；最后排下序处理一下打印的格式。</p><p>以输入以下数据来看一下处理</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">7 4<br>3 5<br>3 4<br>5 -8<br>0 -2<br>0 6<br>4 7<br>3 10<br>4 -1<br>0 4<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//分割</span><br>List&lt;Item&gt; newList = <span class="hljs-keyword">new</span> ArrayList&lt;Item&gt;();<br>List&lt;Item&gt; newOtherList = <span class="hljs-keyword">new</span> ArrayList&lt;Item&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;inputitems.size()-<span class="hljs-number">1</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(inputitems.get(i).getPower()==<span class="hljs-number">0</span> &amp;&amp; inputitems.get(i+<span class="hljs-number">1</span>).getPower()&gt;<span class="hljs-number">0</span>)&#123;<br>        newList.addAll(inputitems.subList(<span class="hljs-number">0</span>,i+<span class="hljs-number">1</span>));<br>        newOtherList.addAll(inputitems.subList(i+<span class="hljs-number">1</span>,inputitems.size()));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//自加</span><br>Polyomial inputPolyomial = <span class="hljs-keyword">new</span> Polyomial(newList)<br>inputPolyomial.selfAdd();<br><br>Polyomial inputOtherPolyomial = <span class="hljs-keyword">new</span> Polyomial(newOtherList);<br>inputOtherPolyomial.selfAdd();<br><br><span class="hljs-comment">//相加</span><br>Polyomial outputpolyomial = inputPolyomial.add(inputOtherPolyomial);<br><br><span class="hljs-comment">//排序</span><br>Collections.sort(outputpolyomial.items);<br><br><span class="hljs-comment">//打印</span><br>StringBuilder outputResult = <span class="hljs-keyword">new</span> StringBuilder();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;outputpolyomial.items.size();i++)&#123;<br>    <span class="hljs-comment">//系数为负</span><br>    <span class="hljs-keyword">if</span>(outputpolyomial.items.get(i).getCoefficient()&lt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">//幂次为0</span><br>        <span class="hljs-keyword">if</span>(outputpolyomial.items.get(i).getPower()==<span class="hljs-number">0</span>)&#123;<br>            outputResult.append(outputpolyomial.items.get(i).getCoefficient());<br>        &#125;<span class="hljs-keyword">else</span>&#123;   outputResult.append(outputpolyomial.items.get(i).getCoefficient()).append(<span class="hljs-string">&quot;x&quot;</span>).append(outputpolyomial.items.get(i).getPower());<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(outputpolyomial.items.get(i).getCoefficient()&gt;<span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//系数为正</span><br>        <span class="hljs-keyword">if</span>(outputpolyomial.items.get(i).getPower()==<span class="hljs-number">0</span>)&#123;<br>            outputResult.append(<span class="hljs-string">&quot;+&quot;</span>).append(outputpolyomial.items.get(i).getCoefficient());<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            outputResult.append(<span class="hljs-string">&quot;+&quot;</span>).append(outputpolyomial.items.get(i).getCoefficient()).append(<span class="hljs-string">&quot;x&quot;</span>).append(outputpolyomial.items.get(i).getPower());<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">if</span>(outputResult.toString().startsWith(<span class="hljs-string">&quot;+&quot;</span>))&#123;<br>    System.out.println(outputResult.substring(<span class="hljs-number">1</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(outputResult);<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>输入数据 <code>inputitems</code></p><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Polyomial&#123;items=[<br>    Item&#123;power=<span class="hljs-number">7</span>, coefficient=<span class="hljs-number">4</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">5</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">4</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">5</span>, coefficient=-<span class="hljs-number">8</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=-<span class="hljs-number">2</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=<span class="hljs-number">6</span>&#125;,<br>    Item&#123;power=<span class="hljs-number">4</span>, coefficient=<span class="hljs-number">7</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">10</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">4</span>, coefficient=-<span class="hljs-number">1</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=<span class="hljs-number">4</span>&#125;<br>]&#125;<br></code></pre></div></td></tr></table></figure><p>分割后</p></blockquote><p><code>inputPolyomial</code></p><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Polyomial&#123;items=[<br>    Item&#123;power=<span class="hljs-number">7</span>, coefficient=<span class="hljs-number">4</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">5</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">4</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">5</span>, coefficient=-<span class="hljs-number">8</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=-<span class="hljs-number">2</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=<span class="hljs-number">6</span>&#125;<br>]&#125;<br></code></pre></div></td></tr></table></figure><p><code>inputOtherPolyomial</code></p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Polyomial&#123;items=[<br>    Item&#123;power=<span class="hljs-number">4</span>, coefficient=<span class="hljs-number">7</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">10</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">4</span>, coefficient=-<span class="hljs-number">1</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=<span class="hljs-number">4</span>&#125;<br>]&#125;<br></code></pre></div></td></tr></table></figure><p>自身去重相加后</p></blockquote><p><code>inputPolyomial</code></p><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Polyomial&#123;items=[<br>    Item&#123;power=<span class="hljs-number">7</span>, coefficient=<span class="hljs-number">4</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">9</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">5</span>, coefficient=-<span class="hljs-number">8</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=<span class="hljs-number">4</span>&#125;<br>]&#125;<br></code></pre></div></td></tr></table></figure><p><code>inputOtherPolyomial</code></p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Polyomial&#123;items=[<br>    Item&#123;power=<span class="hljs-number">4</span>, coefficient=<span class="hljs-number">6</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">10</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=<span class="hljs-number">4</span>&#125;<br>]&#125;<br></code></pre></div></td></tr></table></figure><p>多项式相加</p></blockquote><p><code>outputpolyomial</code></p><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Polyomial&#123;items=[<br>    Item&#123;power=<span class="hljs-number">7</span>, coefficient=<span class="hljs-number">4</span>&#125;,  <br>    Item&#123;power=<span class="hljs-number">5</span>, coefficient=-<span class="hljs-number">8</span>&#125;,<br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">19</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=<span class="hljs-number">8</span>&#125;,<br>    Item&#123;power=<span class="hljs-number">4</span>, coefficient=<span class="hljs-number">6</span>&#125;<br>]&#125;<br></code></pre></div></td></tr></table></figure><p>最后多项式相加的结果排序后</p></blockquote><blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Polyomial&#123;items=[<br>    Item&#123;power=<span class="hljs-number">7</span>, coefficient=<span class="hljs-number">4</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">5</span>, coefficient=-<span class="hljs-number">8</span>&#125;,<br>    Item&#123;power=<span class="hljs-number">4</span>, coefficient=<span class="hljs-number">6</span>&#125;,<br>    Item&#123;power=<span class="hljs-number">3</span>, coefficient=<span class="hljs-number">19</span>&#125;, <br>    Item&#123;power=<span class="hljs-number">0</span>, coefficient=<span class="hljs-number">8</span>&#125;, <br>]&#125;<br></code></pre></div></td></tr></table></figure><p>最后打印</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">4x7</span>-<span class="hljs-number">8</span>x<span class="hljs-number">5</span>+<span class="hljs-number">6</span>x<span class="hljs-number">4</span>+<span class="hljs-number">19</span>x<span class="hljs-number">3</span>+<span class="hljs-number">8</span><br></code></pre></div></td></tr></table></figure><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p><code>list</code>中删除元素，循环中需要注意删除元素后<code>list</code>长度发生变化，有可能会导致出错</p><p><code>list</code>用<code>subList</code>方法截取子<code>list</code>，并不会返回新<code>list</code>，而是返回原有<code>list</code>的视图，原有list变化会影响到<code>sublist</code></p><p>这两点后面文章重点研究一下。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dropwizard项目构建——pom.xml</title>
    <link href="/2019/11/27/Dropwizard-project-build%E2%80%94%E2%80%94pom/"/>
    <url>/2019/11/27/Dropwizard-project-build%E2%80%94%E2%80%94pom/</url>
    
    <content type="html"><![CDATA[<h2 id="Dropwizard项目构建——pom-xml"><a href="#Dropwizard项目构建——pom-xml" class="headerlink" title="Dropwizard项目构建——pom.xml"></a>Dropwizard项目构建——pom.xml</h2><p>用IDEA导入项目文件夹，查看pom.xml文件。</p><blockquote><p>pom即 <strong>Project Object Model（项目对象模型）</strong>，它用于描述整个 Maven 项目，所以也称为 Maven 描述文件。 </p></blockquote><p>纵观整个<code>pom</code>文件可以分为3部分。</p><ul><li><p>项目描述</p></li><li><p>项目依赖</p></li><li><p>项目构建</p></li></ul><h4 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baoabodz.example.dropwizard<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>ava-dropwizard<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0-rc9-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>AvaDropwizard<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>modelVersion</code>：这个是 <code>pom</code>的版本号，目前为 <code>4.0.0</code> ，必须。</p><p><code>groupId、artifactId、version</code>：分别表示 <code>Maven</code> 项目的组织名、构件名、版本号，组成了关于原型（ <code>archetype</code> ）在<code>maven</code>仓库中为唯一坐标。</p><p><code>packaging</code>：表示该项目的打包方式，也就是执行<code>mvn package</code>命令后生成的文件格式，默认为 <code>jar</code>，也可以是<code>war</code>等</p><p><code>name、url</code>：表示该项目的名称与 <code>URL</code> 地址，意义不大，可以省略。</p><p>dependencies：定义该项目的依赖关系，其中每一个 dependency 对应一个 Maven 项目，可见 Maven 坐标再次出现，还多了一个 scope，表示作用域（下面会描述）。</p><p>build：表示与构建相关的配置，这里的 finalName 表示最终构建后的名称 smart-demo.war，这里的 finalName 还可以使用另一种方式来定义（下面会描述）。</p><h4 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <br><span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dropwizard.version</span>&gt;</span>2.0.0-rc9<span class="hljs-tag">&lt;/<span class="hljs-name">dropwizard.version</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.baoabodz.example.dropwizard.AvaDropwizardApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dropwizard-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>       <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;dropwizard.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.dropwizard<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>dropwizard-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><code>properties</code> ：maven使用 <code>properties</code> 来自定义一些配置属性，例如：<code>project.build.sourceEncoding</code>（项目构建源码编码方式），可设置为 <code>UTF-8</code>，可防止中文乱码。也可定义相关构件包版本号，例如：<code>dropwizard.version</code>，便于日后统一升级。 在<code>properties</code> 里设置的属性都可以通过**<code>$&#123;&#125;</code>**形式获取，如下面<code>dependencies</code>中的<code>$&#123;dropwizard.version&#125;</code>则可以获取<code>&lt;dropwizard.version&gt;2.0.0-rc9&lt;/dropwizard.version&gt;</code>中的版本号。</p><h4 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h4><p>项目构建部分主要是被build标签包裹的部分</p><details><summary>pom.xml的build部分</summary><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-shade-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">createDependencyReducedPom</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">createDependencyReducedPom</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">transformers</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ServicesResourceTransformer&quot;</span>/&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">transformer</span> <span class="hljs-attr">implementation</span>=<span class="hljs-string">&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>$&#123;mainClass&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">transformer</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">transformers</span>&gt;</span>                <br>                <span class="hljs-comment">&lt;!-- exclude signed Manifests --&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">filters</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifact</span>&gt;</span>*:*<span class="hljs-tag">&lt;/<span class="hljs-name">artifact</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span>                            <br>                            <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.SF<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span>                            <br>                            <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.DSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span>                            <br>                            <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>META-INF/*.RSA<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">filters</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>package<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>shade<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-jar-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">archive</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;<span class="hljs-name">addClasspath</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addClasspath</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>$&#123;mainClass&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">archive</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-source-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-sources<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>attach-javadocs<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span>                        <br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span>                    <br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span>                <br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>            <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>        <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></div></td></tr></table></figure></details>可以看到]]></content>
    
    
    
    <tags>
      
      <tag>Dropwizard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dropwizard项目构建——初始化</title>
    <link href="/2019/11/20/Dropwizard-project-build%E2%80%94%E2%80%94initialization/"/>
    <url>/2019/11/20/Dropwizard-project-build%E2%80%94%E2%80%94initialization/</url>
    
    <content type="html"><![CDATA[<h2 id="maven创建项目"><a href="#maven创建项目" class="headerlink" title="maven创建项目"></a>maven创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ mvn -B archetype:generate <br>\ -DarchetypeGroupId=io.dropwizard.archetypes <br>\ -DarchetypeArtifactId=java-simple <br>\ -DarchetypeVersion=2.0.0-rc9<br>\ -DgroupId=com.baoabodz.example.dropwizard <br>\ -DartifactId=ava-dropwizard <br>\ -Dversion=2.0.0-rc9-SNAPSHOT<br>\ -Dname=AvaDropwizard<br></code></pre></div></td></tr></table></figure><p>十几分钟后等待出现<code>BUILD SUCCESS</code>    </p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/ava<br>$ tree -A<br>.<br>└── ava-dropwizard<br>    ├── README.md<br>    ├── config.yml<br>    ├── pom.xml<br>    └── src<br>        ├── main<br>        │   ├── java<br>        │   │   └── com<br>        │   │       └── baoabodz<br>        │   │           └── example<br>        │   │               └── dropwizard<br>        │   │                   ├── AvaDropwizardApplication.java<br>        │   │                   ├── AvaDropwizardConfiguration.java<br>        │   │                   ├── api<br>        │   │                   ├── cli<br>        │   │                   ├── client<br>        │   │                   ├── core<br>        │   │                   ├── db<br>        │   │                   ├── health<br>        │   │                   └── resources<br>        │   └── resources<br>        │       ├── assets<br>        │       └── banner.txt<br>        └── <span class="hljs-built_in">test</span><br>            ├── java<br>            │   └── com<br>            │       └── baoabodz<br>            │           └── example<br>            │               └── dropwizard<br>            │                   ├── api<br>            │                   ├── client<br>            │                   ├── core<br>            │                   ├── db<br>            │                   └── resources<br>            └── resources<br>                └── fixtures<br><br>30 directories, 6 files<br></code></pre></div></td></tr></table></figure><p>首先来说一下这个<code>mvn -B</code>是什么意思。<code>mvn -help</code>查看帮助可以看到</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">-B,--batch-mode                        Run <span class="hljs-keyword">in</span> non-interactive (batch)<br></code></pre></div></td></tr></table></figure><p>是以非交互（批处理）模式执行命令。所谓非交互就是在执行的时候不会一步一步询问你<code>DgroupId</code>设置、<code>DartifactId</code>设置等，而是将需要的参数一次性输入。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mvn -B rchetype:generate 相当于<br>mvn --batch-mode rchetype:generate 相当于<br>mvn rchetype:generate -DinteractiveMode=<span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p><code>mvn archetype:generate</code>则调用<code>maven</code>的一个插件<code>maven-archetype-plugin</code>。这个插件可以直接生成一些模板或者原型，更加方便。这个命令是直接生成项目的一个指令：</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm">archetypeGroupId：原型唯一的标识 <br>archetypeArtifactId：原型的名字<br><span class="hljs-symbol">DarchetypeVersion:</span>模板的版本<br>DgroupId：项目或组织名，通常是成为包名<br>DartifactId：项目标识<br>Dversion：项目版本<br>Dname：项目名称<br></code></pre></div></td></tr></table></figure><h2 id="问题及解决Q-amp-R"><a href="#问题及解决Q-amp-R" class="headerlink" title="问题及解决Q&amp;R"></a>问题及解决Q&amp;R</h2><p>我看在<code>dropwizard</code>的<code>github</code>官方例子中项目的版本为<code>2.0.0-rc13</code>，但是执行创建项目报错找不到这个版本</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[INFO] Archetype repository not defined. Using the one from [io.dropwizard.archetypes:java-simple:2.0.0-rc9] found <span class="hljs-keyword">in</span> catalog remote<br>[INFO] Downloading from central: https://repo.maven.apache.org/maven2/io/dropwizard/archetypes/java-simple/2.0.0-rc13/java-simple-2.0.0-rc13.pom<br>[WARNING] The POM <span class="hljs-keyword">for</span> io.dropwizard.archetypes:java-simple:jar:2.0.0-rc13 is missing, no dependency information available<br>......<br>[ERROR] Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:3.1.2:generate (default-cli) on project standalone-pom: The desired archetype does not exist (io.dropwizard.archetypes:java-simple:2.0.0-rc13) -&gt; [Help 1]<br></code></pre></div></td></tr></table></figure><p>按照它的提示在浏览器输入</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">https://repo.maven.apache.org/maven2/io/dropwizard/archetypes/java-simple<br></code></pre></div></td></tr></table></figure><p>可以看到版本从<code>1.3.9</code>跳到<code>2.0.0-x</code>版本</p><p><img src="https://s2.ax1x.com/2019/11/20/MhDG9I.png" alt="MhDG9I.png"></p><p>改为<code>2.0.0-rc9</code> 执行 成功</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>tree命令用法（CMD/Git Bash/Linux）</title>
    <link href="/2019/11/17/tree-command/"/>
    <url>/2019/11/17/tree-command/</url>
    
    <content type="html"><![CDATA[<p>在阅读到别人的技术文章时，经常会看到作者列出的文件树结构，清晰明了，而<code>tree</code>命令就可以实现这种效果。<br><img src="https://s2.ax1x.com/2019/11/18/MsR64x.md.png" alt="目录树示例.png"></p><h2 id="Windows-cmd-的-tree命令"><a href="#Windows-cmd-的-tree命令" class="headerlink" title="Windows cmd 的 tree命令"></a><code>Windows cmd</code> 的 <code>tree</code>命令</h2><p>在<code>cmd</code>中就集成了<code>tree</code> 命令</p><p>使用<code>tree /?</code>查看帮助信息</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">G:\Dev\workspace\hola&gt;tree /?<br>以图形显示驱动器或路径的文件夹结构。<br><br>TREE [drive:][path] [/F] [/A]<br><br>   /F   显示每个文件夹中文件的名称。<br>   /A   使用 ASCII 字符，而不使用扩展字符。<br></code></pre></div></td></tr></table></figure><p>主要命令</p><ul><li><code>tree</code></li><li><code>tree /a</code>(不区分大小写)</li><li><code>tree /f</code>(不区分大小写) 显示全部文件</li><li><code>tree /f &gt; tree.text</code> 将结果输出到tree.txt文件中</li></ul><p>tree  显示目录结构</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">G:\Dev\workspace\hola&gt;tree<br>卷 软件&amp;开发 的文件夹 PATH 列表<br>卷序列号为 623A-7D30<br>G:.<br>└─hola-dropwizard<br>    └─src<br>        ├─main<br>        │  └─java<br>        │      └─com<br>        │          └─baobaodz<br>        │              └─example<br>        │                  └─dropwizard<br>        └─<span class="hljs-built_in">test</span><br>            └─java<br>                └─com<br>                    └─baobaodz<br>                        └─example<br>                            └─dropwizard<br></code></pre></div></td></tr></table></figure><p><code>tree /A</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">G:\Dev\workspace\hola&gt;tree /A<br>卷 软件&amp;开发 的文件夹 PATH 列表<br>卷序列号为 623A-7D30<br>G:.<br>\---hola-dropwizard<br>    \---src<br>        +---main<br>        |   \---java<br>        |       \---com<br>        |           \---baobaodz<br>        |               \---example<br>        |                   \---dropwizard<br>        \---<span class="hljs-built_in">test</span><br>            \---java<br>                \---com<br>                    \---baobaodz<br>                        \---example<br>                            \---dropwizard<br><br><br></code></pre></div></td></tr></table></figure><p><code>tree /f</code> 不仅显示文件夹，还显示文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">G:\Dev\workspace\hola&gt;tree /f<br>卷 软件&amp;开发 的文件夹 PATH 列表<br>卷序列号为 623A-7D30<br>G:.<br>└─hola-dropwizard<br>    │  pom.xml<br>    │<br>    └─src<br>        ├─main<br>        │  └─java<br>        │      └─com<br>        │          └─baobaodz<br>        │              └─example<br>        │                  └─dropwizard<br>        │                          App.java<br>        │<br>        └─<span class="hljs-built_in">test</span><br>            └─java<br>                └─com<br>                    └─baobaodz<br>                        └─example<br>                            └─dropwizard<br>                                    AppTest.java<br></code></pre></div></td></tr></table></figure><h2 id="Windows-git-bash-的-tree-命令"><a href="#Windows-git-bash-的-tree-命令" class="headerlink" title="Windows git bash 的 tree 命令"></a><code>Windows git bash</code> 的 <code>tree</code> 命令</h2><p>然而git中并没有集成<code>tree</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola<br>$ tree<br>bash: tree: <span class="hljs-built_in">command</span> not found<br></code></pre></div></td></tr></table></figure><p> 如果想使用<code>tree</code>命令</p><h3 id="第一种：使用winpty命令"><a href="#第一种：使用winpty命令" class="headerlink" title="第一种：使用winpty命令"></a>第一种：使用<code>winpty</code>命令</h3><p> <code>winpty</code> 是一种提供与<code>cmd</code> 通信的软件包 ，可以通过调用<code>cmd</code>间接实现<code>tree</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">winpty tree.com <br>winpty cmd //c tree <br></code></pre></div></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola<br>$ winpty tree.com<br>卷 软件&amp;开发 的文件夹 PATH 列表<br>卷序列号为 623A-7D30<br>G:.<br>└─hola-dropwizard<br>    └─src<br>        ├─main<br>        │  └─java<br>        │      └─com<br>        │          └─baobaodz<br>        │              └─example<br>        │                  └─dropwizard<br>        └─<span class="hljs-built_in">test</span><br>            └─java<br>                └─com<br>                    └─baobaodz<br>                        └─example<br>                            └─dropwizard<br></code></pre></div></td></tr></table></figure><h3 id="第二种：使用tree-exe"><a href="#第二种：使用tree-exe" class="headerlink" title="第二种：使用tree.exe"></a>第二种：使用<code>tree.exe</code></h3><ol><li>下载  <a href="http://gnuwin32.sourceforge.net/packages/tree.htm">tree for windows</a> 的 <code>Binaries Zip</code>格式，解压后找到bin目录下的<code>tree.exe</code></li><li>复制粘贴到<code>git</code>安装目录下的*usr/bin/*目录下</li><li>重新打开<code>git bash</code>，输入tree就有啦</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola<br>$ tree<br>.<br>`-- hola-dropwizard<br>    |-- pom.xml<br>    `-- src<br>        |-- main<br>        |   `-- java<br>        |       `-- com<br>        |           `-- baobaodz<br>        |               `-- example<br>        |                   `-- dropwizard<br>        |                       `-- App.java<br>        `-- <span class="hljs-built_in">test</span><br>            `-- java<br>                `-- com<br>                    `-- baobaodz<br>                        `-- example<br>                            `-- dropwizard<br>                                `-- AppTest.java<br><br>14 directories, 3 files<br></code></pre></div></td></tr></table></figure><p>常用命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tree 列出所有文件(以虚线形式)<br><br>tree --<span class="hljs-built_in">help</span><br><br>tree -a 列出所有文件<br><br>tree -A 列出所有文件(以ANSI线图形缩进线形式)我叫它折线形式<br><br>tree -d 仅列出目录<br><br>tree -L level 显示目录深度<br><br>tree -o file 将结果输出到文件中<br></code></pre></div></td></tr></table></figure><p><code>tree -a</code> 和<code>tree-A</code>的区别就是画线的不同，个人更喜欢-A折线形式的目录树。</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola<br>$ tree -a<br>.<br>`-- hola-dropwizard<br>    |-- pom.xml<br>    `-- src<br>        |-- main<br>        |   `-- java<br>        |       `-- com<br>        |           `-- baobaodz<br>        |               `-- example<br>        |                   `-- dropwizard<br>        |                       `-- App.java<br>        `-- <span class="hljs-built_in">test</span><br>            `-- java<br>                `-- com<br>                    `-- baobaodz<br>                        `-- example<br>                            `-- dropwizard<br>                                `-- AppTest.java<br><br>14 directories, 3 files<br><br>baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola<br>$ tree -A<br>.<br>└── hola-dropwizard<br>    ├── pom.xml<br>    └── src<br>        ├── main<br>        │   └── java<br>        │       └── com<br>        │           └── baobaodz<br>        │               └── example<br>        │                   └── dropwizard<br>        │                       └── App.java<br>        └── <span class="hljs-built_in">test</span><br>            └── java<br>                └── com<br>                    └── baobaodz<br>                        └── example<br>                            └── dropwizard<br>                                └── AppTest.java<br><br>14 directories, 3 files<br></code></pre></div></td></tr></table></figure><p><code>tree -LA 3</code> 列出三级目录下所有文件（以折线形式）</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola<br>$ tree -LA 3<br>.<br>└── hola-dropwizard<br>    ├── pom.xml<br>    └── src<br>        ├── main<br>        └── <span class="hljs-built_in">test</span><br>4 directories, 1 file<br></code></pre></div></td></tr></table></figure><h2 id="Linux-的-tree-命令"><a href="#Linux-的-tree-命令" class="headerlink" title="Linux 的 tree 命令"></a><code>Linux</code> 的 <code>tree</code> 命令</h2><p><code>Linux</code>自身也没有集成<code>tree</code>命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz ~]<span class="hljs-comment"># tree</span><br>-bash: tree: <span class="hljs-built_in">command</span> not found<br></code></pre></div></td></tr></table></figure><p>需要下载，以<code>centOS 7</code>为例，执行 <code>yum -y install tree</code></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz ~]<span class="hljs-comment"># yum -y install tree</span><br>Loaded plugins: fastestmirror<br>Loading mirror speeds from cached hostfile<br>.....<br><br>Dependencies Resolved<br><br>================================================================================================================================<br><br> Package                    Arch                         Version                               Repository                  Size<br>================================================================================================================================<br><br>Installing:<br> tree                       x86_64                       1.6.0-10.el7                          base                        46 k<br><br>Transaction Summary<br>================================================================================================================================<br><br>Install  1 Package<br><br>Total download size: 46 k<br>Installed size: 87 k<br>Downloading packages:<br>tree-1.6.0-10.el7.x86_64.rpm                                                                             |  46 kB  00:00:00<br>Running transaction check<br>Running transaction <span class="hljs-built_in">test</span><br>Transaction <span class="hljs-built_in">test</span> succeeded<br>Running transaction<br>  Installing : tree-1.6.0-10.el7.x86_64                                                                                     1/1<br>  Verifying  : tree-1.6.0-10.el7.x86_64                                                                                     1/1<br><br>Installed:<br>  tree.x86_64 0:1.6.0-10.el7<br><br>Complete!<br></code></pre></div></td></tr></table></figure><p>常用命令 和<code>git bash</code>安装的<code>tree</code> 命令一致</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tree 列出所有文件(以虚线形式)<br>tree --<span class="hljs-built_in">help</span><br>tree -a 列出所有文件<br>tree -A 列出所有文件(以ANSI线图形缩进线形式)我叫它折线形式<br>tree -d 仅列出目录<br>tree -L level 显示目录深度<br>tree -o file 将结果输出到文件中<br></code></pre></div></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz home]<span class="hljs-comment"># tree</span><br>.<br>├── oracle<br>│   └── oradiag_oracle<br>│       └── diag<br>│           └── clients<br>│               └── user_oracle<br>│                   └── host_2814106076_76<br>│                       ├── alert<br>│                       │   └── log.xml<br>│                       ├── cdump<br>│                       ├── incident<br>│                       ├── incpkg<br>│                       ├── lck<br>│                       │   ├── AM_1096102193_3488045378.lck<br>│                       │   ├── AM_1096102262_3454819329.lck<br>│                       │   ├── AM_1744845641_3861997533.lck<br>│                       │   └── AM_3216668543_3129272988.lck<br>│                       ├── metadata<br>│                       │   ├── ADR_CONTROL.ams<br>│                       │   ├── ADR_INVALIDATION.ams<br>│                       │   ├── INC_METER_IMPT_DEF.ams<br>│                       │   └── INC_METER_PK_IMPTS.ams<br>│                       ├── stage<br>│                       ├── sweep<br>│                       └── trace<br>│                           └── sqlnet.log<br>└── swap<br><br>15 directories, 11 files<br></code></pre></div></td></tr></table></figure><h2 id="Windows-cmd的tree和-git-bash的tree的区别"><a href="#Windows-cmd的tree和-git-bash的tree的区别" class="headerlink" title="Windows cmd的tree和 git bash的tree的区别"></a><code>Windows cmd</code>的<code>tree</code>和 <code>git bash</code>的<code>tree</code>的区别</h2><p><code>Windows</code>集成的<code>tree</code>命令是在<em>C:\Windows\System32</em>目录下的<code>tree.com</code>文件起的作用</p><p><code>git bash</code> 的<code>tree</code>命令是通过引入<code>tree.exe</code>到<em>Git\usr\bin</em>中而实现的</p><p>在命令格式上，<code>cmd tree</code> 使用<code>/</code>来作为参数，git bash tree使用<code>-</code>作为输入参数；另外前者不区分大小写，<code>/f</code>和<code>/F</code>的作用一致。而<code>git bash tree</code>不仅区分大小写，而且大写小写参数不同作用也往往不同：</p><p>如</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tree -d 仅显示文件夹<br>tree -D 以显示日期目录树<br></code></pre></div></td></tr></table></figure><p>其次<code>cmd tree</code>默认显示是以折线显示目录树，而<code>git bash tree</code>默认以虚线形式显示目录树，这点与Linux tree命令显示的不一样。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://my.oschina.net/snowdreams1006/blog/3045419">git 入门教程之 git bash 竟然不支持 tree 命令</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令汇总（二）</title>
    <link href="/2019/11/10/Commonly-Used-Linux-Command-Summary-%E2%85%A1/"/>
    <url>/2019/11/10/Commonly-Used-Linux-Command-Summary-%E2%85%A1/</url>
    
    <content type="html"><![CDATA[<p>总结一些在日常工作中用到的查看磁盘占用的linux命令</p><a id="more"></a><h3 id="系统磁盘占用"><a href="#系统磁盘占用" class="headerlink" title="系统磁盘占用"></a>系统磁盘占用</h3><h4 id="df-h-查看磁盘空间"><a href="#df-h-查看磁盘空间" class="headerlink" title="df -h 查看磁盘空间"></a>df -h 查看磁盘空间</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz ~]<span class="hljs-comment"># df -h</span><br>Filesystem      Size  Used Avail Use% Mounted on<br>/dev/vda1        40G   28G  9.3G  76% /<br>devtmpfs        909M     0  909M   0% /dev<br>tmpfs           920M  479M  441M  53% /dev/shm<br>tmpfs           920M  560K  919M   1% /run<br>tmpfs           920M     0  920M   0% /sys/fs/cgroup<br>tmpfs           184M     0  184M   0% /run/user/0<br></code></pre></div></td></tr></table></figure><h4 id="du-sh-查看当前目录总共占的容量-而不单独列出各子项占用的容量"><a href="#du-sh-查看当前目录总共占的容量-而不单独列出各子项占用的容量" class="headerlink" title="du -sh : 查看当前目录总共占的容量,而不单独列出各子项占用的容量"></a>du -sh : 查看当前目录总共占的容量,而不单独列出各子项占用的容量</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz ~]<span class="hljs-comment"># du -sh</span><br>1.4G    .<br></code></pre></div></td></tr></table></figure><h4 id="du-ah-–max-depth-1-查看根目录下各个文件占用情况"><a href="#du-ah-–max-depth-1-查看根目录下各个文件占用情况" class="headerlink" title="du -ah –max-depth=1  /   查看根目录下各个文件占用情况"></a>du -ah –max-depth=1  /   查看根目录下各个文件占用情况</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz ~]<span class="hljs-comment"># du -ah --max-depth=1 /</span><br>2.1G    /home<br>560K    /run<br>68K     /tmp<br>2.2G    /opt<br>1.8G    /usr<br>16K     /lost+found<br>4.0K    /srv<br>0       /lib<br>0       /.autorelabel<br>du: cannot access ‘/proc/10862/task/10862/fd/4’: No such file or directory<br>du: cannot access ‘/proc/10862/task/10862/fdinfo/4’: No such file or directory<br>du: cannot access ‘/proc/10862/fd/3’: No such file or directory<br>du: cannot access ‘/proc/10862/fdinfo/3’: No such file or directory<br>0       /proc<br>4.0K    /mnt<br>172M    /boot<br>0       /lib64<br>479M    /dev<br>0       /sbin<br>0       /sys<br>1.4G    /root<br>0       /bin<br>4.0K    /media<br>38M     /etc<br>738M    /var<br>20G     /data<br>0       /profile<br>29G     /<br></code></pre></div></td></tr></table></figure><p>max-depth=1表示目录深度，如果改成max-depth=2，则会查询二级目录的大小</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz ~]<span class="hljs-comment"># du -ah --max-depth=2 /</span><br>2.1G    /home/swap<br>388K    /home/oracle<br>2.1G    /home<br>.....<br></code></pre></div></td></tr></table></figure><p>/代表根目录，换成其他目录du -ah –max-depth=1 /home</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz ~]<span class="hljs-comment"># du -ah --max-depth=1  /home</span><br>2.1G    /home/swap<br>388K    /home/oracle<br>2.1G    /home<br></code></pre></div></td></tr></table></figure><h4 id="du-h-sort-hr-按文件大小（K-M-G）排序"><a href="#du-h-sort-hr-按文件大小（K-M-G）排序" class="headerlink" title="du -h *|sort -hr 按文件大小（K/M/G）排序"></a>du -h *|sort -hr 按文件大小（K/M/G）排序</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz oracle]<span class="hljs-comment"># du -h ./ --max-depth=1 | sort -hr</span><br>18G     ./<br>8.2G    ./oradata<br>5.3G    ./diag<br>4.0G    ./product<br>9.4M    ./flash_recovery_area<br>2.1M    ./admin<br>104K    ./cfgtoollogs<br>4.0K    ./checkpoints<br></code></pre></div></td></tr></table></figure><h4 id="du-s-sort-nr-按文件字节大小排序"><a href="#du-s-sort-nr-按文件字节大小排序" class="headerlink" title="du -s * | sort -nr 按文件字节大小排序"></a>du -s * | sort -nr 按文件字节大小排序</h4><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz oracle]<span class="hljs-comment">#  du -s * | sort -nr</span><br>8530932 oradata<br>5452148 diag<br>4178284 product<br>9536    flash_recovery_area<br>2056    admin<br>104     cfgtoollogs<br>4       checkpoints<br></code></pre></div></td></tr></table></figure><h4 id="du-和-df-的区别"><a href="#du-和-df-的区别" class="headerlink" title="du 和 df 的区别"></a>du 和 df 的区别</h4><p><code>du(disk usage)</code>会把指定目录下所有文件、目录、目录下的文件都统计。也就是说我们能在文件系统里面看到的文件才会被du统计。</p><p>而 <code>df(disk free)</code>不光考虑文件占用空间，还统计被命令和程序占用的空间 。因此df统计的会大于du统计的，这也是有时候有df查看空间已满，而du还有空间的原因。</p><p>比如说在清理磁盘空间时，rm掉一些日志文件后，发现磁盘空间并没有释放，根本是原因是文件被进程打开中，文件描述符未被释放，而这些以删除的文件而依然被占用的文件df会统计，du并不会。</p><p>查看哪些文件被删除但是依然被占用</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">yum install lsof<br>lsof | grep deleted<br></code></pre></div></td></tr></table></figure><p>结果</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[root@izuf66fm097gavs15ngjfvz /]<span class="hljs-comment"># lsof | grep deleted</span><br>oracle    20475        oracle    8u      REG              253,1          0    1311391 /data/oracle/product/11.2.0/db_1/dbs/lkinstorcl11g (deleted)<br>oracle    20475        oracle    9w      REG              253,1      14418     528000 /data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trc (deleted)<br>oracle    20475        oracle   10w      REG              253,1        246     528001 /data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trm (deleted)<br>oracle    20908        oracle    8u      REG              253,1          0    1311391 /data/oracle/product/11.2.0/db_1/dbs/lkinstorcl11g (deleted)<br>oracle    20908        oracle    9w      REG              253,1      14418     528000 /data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trc (deleted)<br>oracle    20908        oracle   10w      REG              253,1        246     528001 /data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trm (deleted)<br>oracle    20912        oracle    8u      REG              253,1          0    1311391 /data/oracle/product/11.2.0/db_1/dbs/lkinstorcl11g (deleted)<br>......<br></code></pre></div></td></tr></table></figure><p>注：可以利用<code>echo &quot;&quot; &gt; &quot;/data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trc&quot;</code>删除日志文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【2019-11第二周】技能点</title>
    <link href="/2019/11/08/2019-11-second-week/"/>
    <url>/2019/11/08/2019-11-second-week/</url>
    
    <content type="html"><![CDATA[<p>这一周主要有：将IDEA设置eclipse风格的快捷键,Eclipse常用快捷键</p><a id="more"></a><h3 id="Friday"><a href="#Friday" class="headerlink" title="Friday"></a>Friday</h3><h4 id="将IDEA设置eclipse风格的快捷键"><a href="#将IDEA设置eclipse风格的快捷键" class="headerlink" title="将IDEA设置eclipse风格的快捷键"></a>将IDEA设置eclipse风格的快捷键</h4><p><code>Files-Settings-keymap</code>选择<code>Eclipse</code>即可</p><p><a href="https://imgchr.com/i/MeFwNQ"><img src="https://s2.ax1x.com/2019/11/09/MeFwNQ.md.png" alt="MeFwNQ.md.png"></a></p><p>还要设置Alt+/代码提示快捷键</p><p><code>File -settings -keymap</code> 在搜索框中搜索 <code>completion</code><br>选择<code>Cyclic Expand word</code>右键选择 <code>Remove Alt+/</code> </p><p><a href="https://imgchr.com/i/MekYG9"><img src="https://s2.ax1x.com/2019/11/09/MekYG9.md.png" alt="MekYG9.md.png"></a></p><p>在下方选择<code>Class Name Completion</code> 右键 <code>Remove Ctrl+Alt+</code>空格 并更改快捷键为<code>Alt+/</code> </p><p><a href="https://imgchr.com/i/MekRMt"><img src="https://s2.ax1x.com/2019/11/09/MekRMt.md.png" alt="MekRMt.md.png"></a></p><h4 id="Eclipse常用快捷键"><a href="#Eclipse常用快捷键" class="headerlink" title="Eclipse常用快捷键"></a>Eclipse常用快捷键</h4><table><thead><tr><th>快捷键</th><th>描述</th><th>好处</th></tr></thead><tbody><tr><td>Alt+/</td><td>补全提示代码</td><td>省去多余的敲键盘啦</td></tr><tr><td>Ctrl+D</td><td>删除鼠标所在行或选中的多行</td><td>不用选中再删除啦</td></tr><tr><td>Crtl+Alt+↓</td><td>向下复制</td><td>不用选中再复制粘贴啦</td></tr><tr><td>Crtl+Alt+↑</td><td>向上复制</td><td></td></tr><tr><td>Alt+↓</td><td>向下移动</td><td>不用剪切啦</td></tr><tr><td>Alt+↑</td><td>向上移动</td><td></td></tr><tr><td>Shift+Enter</td><td>插入空行</td><td>鼠标不用再放到行末回车啦🤞🤞🤞🤞🤞</td></tr><tr><td>Ctrl+/</td><td>注释</td><td></td></tr><tr><td>Alt+Enter</td><td>导入所需的包</td><td></td></tr><tr><td>Ctrl+Shift+O</td><td>移除没有用到的包</td><td>不用手动删除啦</td></tr><tr><td>Ctrl+Shift+X</td><td>将所选全部大写</td><td></td></tr><tr><td>Ctrl+Shift+Y</td><td>将所选全部小写</td><td></td></tr></tbody></table><p>查找、搜索、跳转快捷键</p><table><thead><tr><th>快捷键</th><th>描述</th><th>好处</th></tr></thead><tbody><tr><td>Ctrl+K</td><td>向下循环定位选中字符</td><td></td></tr><tr><td>Ctrl+H</td><td>打开搜索弹窗或底部显示栏</td><td></td></tr><tr><td>Ctrl+G</td><td>所选字符在项目和library中的声明</td><td>快速定位到某个类或方法在哪被引用</td></tr><tr><td>Ctrl+Shift+T</td><td>查找项目中与之匹配的类</td><td>IDEA呼出弹窗，可以搜索全部、文件、类等</td></tr><tr><td>F3</td><td>跳转到类或方法声明的地方</td><td></td></tr><tr><td>Alt+←</td><td>返回上一次所在文件</td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>技能点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【2019-11第一周】技能点</title>
    <link href="/2019/11/01/2019-11-first-week/"/>
    <url>/2019/11/01/2019-11-first-week/</url>
    
    <content type="html"><![CDATA[<p>这一周主要有：premire渲染器,CPU和GPU的区别,maven常用命令,aria2</p><a id="more"></a><h3 id="Monday"><a href="#Monday" class="headerlink" title="Monday"></a>Monday</h3><h4 id="premire渲染器"><a href="#premire渲染器" class="headerlink" title="premire渲染器"></a>premire渲染器</h4><p>在将视频拖入pr轨道时候，时间轴上方呈现红色，表示没有渲染，播放预览会卡顿现象，而且渲染时CPU占用到99%。正常情况下应该为黄色。</p><p><img src="https://s2.ax1x.com/2019/11/02/Kbs2GR.png" alt="image-20191101231359836"></p><p>在文件-项目设置-视频渲染和回放中，渲染程序只支持【仅Mercury Playback Engine软件】。</p><p><img src="https://s2.ax1x.com/2019/11/02/Kbs6IJ.png" alt="捕获1"></p><p>原因是使用的系统自带的核显造成的，系统安装的独立显卡并未使用上。更新或安装独立显卡驱动即可。再次打开项目设置，可以看到出现了【Mercury Playback Engine GPU加速（OpenCL）】的选项，选择后会发现红线现象消失。</p><ul><li>Mercury Playback Engine软件： 纯CPU处理</li><li>Mercury Playback Engine GPU加速（OpenCL）：针对AMD显卡/Intel集显</li></ul><h4 id="CPU和GPU的区别"><a href="#CPU和GPU的区别" class="headerlink" title="CPU和GPU的区别"></a>CPU和GPU的区别</h4><p>CPU（ Central Processing Unit）即中央处理器</p><p>GPU（Graphics Processing Unit）即图形处理器</p><p> GPU是显卡的”心脏”，也就相当于CPU在电脑中的作用 。CPU是通用计算，GPU是专用计算。</p><p>GPU的强项是并行运算能力比CPU强（多个不同任务的并行运算GPU也无法胜任，GPU只适合处理单个可并行任务的并行运算），而不是浮点运算能力强。 </p><p>引用知乎上的一个回答</p><blockquote><p>当你操作电脑的时候，为了完成某项工作，需要电脑帮你工作，就像计算某个题目那样。计算题目，理解题目并且整理出解题的步骤以及解法，那是CPU的事情。但是解题的过程需要用到的众多计算，则需要一帮不需要很高逻辑理解力的计算者完成，他们只需要负责其中很简单但是数量又很大的简单运算就行了，最后他们把各自运算的结果交出来给CPU整理，那么这群计算者就是GPU。这就是一个博士带着100个小学生的意思了</p></blockquote><p>GPU有非常多的厂商都生产，和CPU一样，比较知名的有AMD、NVIDIA、Intel3个生产厂商。 </p><table><thead><tr><th>厂商</th><th>nVidia GPU</th><th>AMD GPU</th><th>Intel MIC</th><th>nVidia Tegra</th></tr></thead><tbody><tr><td>协议</td><td>CUDA C/C++</td><td>OpenCL</td><td>MIC OpenMP</td><td>CUDA</td></tr></tbody></table><h3 id="Saturday"><a href="#Saturday" class="headerlink" title="Saturday"></a>Saturday</h3><h4 id="maven常用命令"><a href="#maven常用命令" class="headerlink" title="maven常用命令"></a>maven常用命令</h4><ul><li>清理 mvn clean：将以前编译得到的旧文件class字节码文件删除</li><li>编译 mvn compile：将java源程序编译成class字节码文件</li><li>测试 mvn test：自动测试，自动调用junit程序</li><li>报告 mvn report：测试程序执行的结果</li><li>打包 mvn package：动态Web工程打War包，java工程打jar包</li><li>安装 mvn install：Maven特定的概念—–将打包得到的文件复制到“仓库”中的指定位置</li><li>部署 mvn deploy：将动态Web工程生成的war包复制到Servlet容器下，使其可以运行</li></ul><h3 id="Sunday"><a href="#Sunday" class="headerlink" title="Sunday"></a>Sunday</h3><p>aria2 是一款支持多种协议的轻量级命令行下载工具。有以下特性：</p><ul><li>多线程连线：aria2 会自动从多个线程下载文件，并充分利用你的带宽；</li><li>轻量：运行时不会占用过多资源，根据官方介绍，内存占用通常在 4MB~9MB，使用 BitTorrent 协议，下行速度 2.8MB/s 时 CPU 占用率约 6%；</li><li>全功能 BitTorrent 客户端；</li><li>支持 RPC 界面远程控制</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>技能点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>multiple parameters with no annotation. Unable to resolve the injection source</title>
    <link href="/2019/10/17/multiple-parameters-with-no-annotation/"/>
    <url>/2019/10/17/multiple-parameters-with-no-annotation/</url>
    
    <content type="html"><![CDATA[<p>在dropwizard中resource中想通过POST方法增加书籍，接收两个参数报错：</p><div class="hljs code-wrapper"><pre><code>package com.baobaodz.example.dropwizard.resources;import com.baobaodz.example.dropwizard.api.Book;import javax.servlet.http.HttpServletRequest;import javax.validation.Valid;import javax.ws.rs.*;import javax.ws.rs.core.MediaType;import java.net.InetAddress;import java.net.UnknownHostException;/***@author baobaodz*/@Path(&amp;quot;/api&amp;quot;)@Produces(MediaType.APPLICATION_JSON)public class HolaRestResource &#123;    @Path(&amp;quot;/book&amp;quot;)    @POST    @Consumes(MediaType.APPLICATION_JSON)    public Book saveSingleBook(HttpServletRequest request,Book book)&#123;        Book newBook = new Book();        newBook.setId(book.getId());        newBook.setName(book.getName());        newBook.setAuthor(book.getAuthor());        newBook.setPublishDate(book.getPublishDate());        return newBook;    &#125;&#125;</code></pre></div><p>报错：</p><div class="hljs code-wrapper"><pre><code>[[FATAL] Method public com.baobaodz.example.dropwizard.api.Book com.baobaodz.example.dropwizard.resources.HolaRestResource.saveSingleBook(javax.servlet.http.HttpServletRequest,com.baobaodz.example.dropwizard.api.Book) on resource class com.baobaodz.example.dropwizard.resources.HolaRestResource contains multiple parameters with no annotation. Unable to resolve the injection source.; .......io.dropwizard.jersey.setup.JerseyServletContainer-38aafb53@4297147d==io.dropwizard.jersey.setup.JerseyServletContainer,jsp=null,order=1,inst=false</code></pre></div><p>注意这一句</p><p><code>HolaRestResource contains multiple parameters with no annotation. Unable to resolve the injection source.</code></p><p>大意就是<code>HolaRestResource</code>里包含了多个未被注解的参数</p><p>原因：参考<a href="https://stackoverflow.com/questions/47121182/multiple-parameters-in-web-service-java-jax-rs">multiple parameters in web service java JAX-RS</a>]</p><p>其中：资源方法不能具有多个实体参数。每个资源方法中可以有多个<code>@PathParam</code>，<code>@QueryParam</code>等，但只能有一个未注释的参数。参数未用@FormParam等注释注释的参数值（称为实体参数）是从请求实体主体映射的。实体主体和Java类型之间的转换是实体提供者的责任，<strong>资源方法必须最多具有一个实体参数</strong>。</p><p>解决办法有两种，第一种去掉第一个参数，第二种给第一个参数添加注解@Context。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Dropwizard</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令汇总（一）</title>
    <link href="/2019/10/12/Commonly-Used-Linux-Command-Summary/"/>
    <url>/2019/10/12/Commonly-Used-Linux-Command-Summary/</url>
    
    <content type="html"><![CDATA[<p>总结一些在日常工作中用到的处理文件和目录的linux命令</p><a id="more"></a><h3 id="一、目录操作"><a href="#一、目录操作" class="headerlink" title="一、目录操作"></a>一、目录操作</h3><h4 id="pwd-当前所在目录"><a href="#pwd-当前所在目录" class="headerlink" title="pwd 当前所在目录"></a>pwd 当前所在目录</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz home]# pwd<br>/home<br></code></pre></div></td></tr></table></figure><h4 id="ls-列出目录内容"><a href="#ls-列出目录内容" class="headerlink" title="ls 列出目录内容"></a>ls 列出目录内容</h4><ul><li><p>英文原意：list</p></li><li><p>常用选项：</p></li><li><ul><li><p>-l ：详细信息显示</p><ul><li>  -a：显示所有文件，包括隐藏文件</li><li>  -h：将文件容量以较易读的方式（GB，kB等）列出来</li></ul><p>另外，这些参数可以组合使用，例如<code>ls -la</code>，显示当前目录所有文件的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">    [root@izuf66fm097gavs15ngjfvz home]# ls<br>    oracle  swap<br>    [root@izuf66fm097gavs15ngjfvz home]# ls -a<br>    .  ..  oracle  swap<br>    [root@izuf66fm097gavs15ngjfvz home]# ls -la<br>    total 2097168<br>    drwxr-xr-x.  3 root   root           4096 Apr 11  2018 .<br>    dr-xr-xr-x. 19 root   root           4096 Sep  7 21:14 ..<br>    drwx------   3 oracle oinstall       4096 Nov 14  2018 oracle<br>    -rw-r--r--   1 root   root     2147483648 Oct  9  2018 swap<br>    [root@izuf66fm097gavs15ngjfvz home]# ls -lah<br>    total 2.1G<br>    drwxr-xr-x.  3 root   root     4.0K Apr 11  2018 .<br>    dr-xr-xr-x. 19 root   root     4.0K Sep  7 21:14 ..<br>    drwx------   3 oracle oinstall 4.0K Nov 14  2018 oracle<br>-rw-r--r--   1 root   root     2.0G Oct  9  2018 swap<br></code></pre></div></td></tr></table></figure><p></pre></p></li></ul></li></ul><h4 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a><strong>cd</strong> 切换目录</h4><ul><li><p>英文原意：change directory</p></li><li><p>cd oracle     //进入指定目录,相当于<br>  cd ./oracle   // 切换到当前目录下的shi目录中，“.”表示当前目录<br>  cd ..         //  回到上级目录<br>  cd -          // 返回进入此目录之前的目录</p>  <figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz home]# ls<br>oracle  swap<br>[root@izuf66fm097gavs15ngjfvz home]# cd oracle<br>[root@izuf66fm097gavs15ngjfvz oracle]# ls<br>oradiag_oracle<br>[root@izuf66fm097gavs15ngjfvz oracle]# cd ..<br>[root@izuf66fm097gavs15ngjfvz home]# cd ./oracle<br>[root@izuf66fm097gavs15ngjfvz oracle]# ls<br>oradiag_oracle<br>[root@izuf66fm097gavs15ngjfvz oracle]# cd -<br>/home<br>[root@izuf66fm097gavs15ngjfvz home]# ls<br>oracle  swap<br>[root@izuf66fm097gavs15ngjfvz home]# <br></code></pre></div></td></tr></table></figure></li></ul><h4 id="mkdir-新建目录"><a href="#mkdir-新建目录" class="headerlink" title="mkdir 新建目录"></a><strong>mkdir 新建目录</strong></h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">root@izuf66fm097gavs15ngjfvz /]# cd home<br>[root@izuf66fm097gavs15ngjfvz home]# ls<br>oracle  swap<br>[root@izuf66fm097gavs15ngjfvz home]# mkdir mysql<br>[root@izuf66fm097gavs15ngjfvz home]# ls<br>mysql  oracle  swap<br></code></pre></div></td></tr></table></figure><h4 id="rmdir-删除空目录"><a href="#rmdir-删除空目录" class="headerlink" title="rmdir 删除空目录"></a><strong>rmdir 删除空目录</strong></h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">如目录不为空，删除不了，需要使用`rm -rf 目录名`才能强制删除非空目录。<br><br>[root@izuf66fm097gavs15ngjfvz home]# ls<br>oracle  swap<br>[root@izuf66fm097gavs15ngjfvz home]# mkdir mysql<br>[root@izuf66fm097gavs15ngjfvz home]# ls<br>mysql  oracle  swap<br>[root@izuf66fm097gavs15ngjfvz home]# cd mysql<br>[root@izuf66fm097gavs15ngjfvz mysql]# touch readme.md<br>[root@izuf66fm097gavs15ngjfvz mysql]# cd ../<br>[root@izuf66fm097gavs15ngjfvz home]# rmdir mysql<br>rmdir: failed to remove ‘mysql’: Directory not empty<br>[root@izuf66fm097gavs15ngjfvz home]# rm -rf mysql<br>[root@izuf66fm097gavs15ngjfvz home]# ls<br>oracle  swap<br>[root@izuf66fm097gavs15ngjfvz home]#<br></code></pre></div></td></tr></table></figure><h3 id="二、文件操作"><a href="#二、文件操作" class="headerlink" title="二、文件操作"></a>二、文件操作</h3><h4 id="touch-新建文件"><a href="#touch-新建文件" class="headerlink" title="touch 新建文件"></a><strong>touch 新建文件</strong></h4><p>如果一个文件名参数是一个不存在的文件，则会创建一个空文件。</p><p>如果存在则会更新文件访问时间。并不会对文件内容做出改变。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">touch test.java    // 如果文件不存在，就创建test.java<br><br>example:<br><br>[root@izuf66fm097gavs15ngjfvz home]# touch test.java<br>[root@izuf66fm097gavs15ngjfvz home]# ls -l<br>total 2097160<br>drwx------ 3 oracle oinstall       4096 Nov 14  2018 oracle<br>-rw-r--r-- 1 root   root     2147483648 Oct  9  2018 swap<br>-rw-r--r-- 1 root   root              0 Oct 11 23:33 test.java<br>[root@izuf66fm097gavs15ngjfvz home]# touch test.java<br>[root@izuf66fm097gavs15ngjfvz home]# ls -l<br>total 2097160<br>drwx------ 3 oracle oinstall       4096 Nov 14  2018 oracle<br>-rw-r--r-- 1 root   root     2147483648 Oct  9  2018 swap<br>-rw-r--r-- 1 root   root              0 Oct 11 23:34 test.java<br></code></pre></div></td></tr></table></figure><h4 id="mv-移动和重命名文件"><a href="#mv-移动和重命名文件" class="headerlink" title="mv 移动和重命名文件"></a><strong>mv 移动和重命名文件</strong></h4><ul><li><p>英文原意：move</p></li><li><p>常用选项：</p></li><li><ul><li><p>-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖</p><ul><li>  -i ：若目标文件已经存在，就会询问是否覆盖</li><li>  -u ：若目标文件已经存在，且比目标文件新，才会更新</li></ul><p><strong>mv file1 file2 file3 dir   // 把文件file1、file2、file3移动到当前目录dir中</strong></p><p><strong>mv file1 file2 file3 ../dir   // 把文件file1、file2、file3移动到当上级目录dir中</strong></p><p><strong>mv file1 file2  // 把文件file1重命名为file2</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz home]# ls<br>oracle  swap  test.java<br>[root@izuf66fm097gavs15ngjfvz home]# mv test.java oracle <br>[root@izuf66fm097gavs15ngjfvz home]# ls<br>oracle  swap<br>[root@izuf66fm097gavs15ngjfvz home]# cd oracle<br>[root@izuf66fm097gavs15ngjfvz oracle]# ls<br>oradiag_oracle  test.java<br>[root@izuf66fm097gavs15ngjfvz oracle]# mv test.java HelloWorld.java<br>[root@izuf66fm097gavs15ngjfvz oracle]# ls<br>HelloWorld.java  oradiag_oracle<br></code></pre></div></td></tr></table></figure></li></ul></li></ul><h4 id="ls-l-查看文件权限"><a href="#ls-l-查看文件权限" class="headerlink" title="ls -l 查看文件权限"></a>ls -l 查看文件权限</h4><h4 id="chmod-修改权限"><a href="#chmod-修改权限" class="headerlink" title="chmod 修改权限"></a>chmod 修改权限</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l HelloWorld.java <br>-rw-r--r-- 1 root root 0 Oct 13 15:20 HelloWorld.java<br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# chmod 777 HelloWorld.java <br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l HelloWorld.java <br>-rwxrwxrwx 1 root root 0 Oct 13 15:20 HelloWorld.java<br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# chmod 666 HelloWorld.java <br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l<br>total 0<br>-rw-rw-rw- 1 root root 0 Oct 13 15:20 HelloWorld.java<br><br></code></pre></div></td></tr></table></figure><p>r表示读取（read）权限，w表示写入（write）权限，x表示执行（eXecute）权限，通常具体的权限由数字来表示：r=4，w=2，x=1</p><p>若要rwx属性则4+2+1=7；</p><p>若要rw-属性则4+2=6；</p><p>若要r-x属性则4+1=7。</p><p>常用修改权限的命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo chmod 600 ××× （只有所有者有读和写的权限）<br><br>sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）<br><br>sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）<br><br>sudo chmod 666 ××× （每个人都有读和写的权限）<br><br>sudo chmod 777 ××× （每个人都有读和写以及执行的权限）<br><br>若要修改目录下所有文件的权限:chmod -R 权限 目录<br><br>`[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l<br>total 0<br>-rw-r--r-- 1 root root 0 Oct 13 15:32 app.java<br>-rw-rw-rw- 1 root root 0 Oct 13 15:20 HelloWorld.java<br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# chmod -R 777 ../HelloWorld<br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# <br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l<br>total 0<br>-rwxrwxrwx 1 root root 0 Oct 13 15:32 app.java<br>-rwxrwxrwx 1 root root 0 Oct 13 15:20 HelloWorld.java<br>`<br></code></pre></div></td></tr></table></figure><h4 id="rm-删除文件或目录"><a href="#rm-删除文件或目录" class="headerlink" title="rm 删除文件或目录"></a>rm 删除文件或目录</h4><ul><li>  常用选项：</li><li><ul><li>-f ：就是force的意思，忽略不存在的文件，不会出现警告消息<ul><li>  -i ：互动模式，在删除前会询问用户是否操作</li><li>  -r ：(recursive) 指示rm将参数中列出的全部目录和子目录均递归地删除。</li></ul></li></ul></li></ul><h4 id="cat-查看文件内容"><a href="#cat-查看文件内容" class="headerlink" title="cat 查看文件内容"></a>cat 查看文件内容</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz HelloWorld]# vi HelloWorld.java <br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# cat HelloWorld.java <br>import test.package;<br></code></pre></div></td></tr></table></figure><p>​    </p><h4 id="find-查找文件"><a href="#find-查找文件" class="headerlink" title="find 查找文件"></a>find 查找文件</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls<br>appConfiguration.java  app.java  HelloWorld.java<br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# find app.java<br>app.java<br>[root@izuf66fm097gavs15ngjfvz HelloWorld]# find app*.java<br>appConfiguration.java<br>app.java<br>[root@izuf66fm097gavs15ngjfvz home]# find oracle/HelloWorld/ -name &amp;quot;*.java&amp;quot;<br>oracle/HelloWorld/appConfiguration.java<br>oracle/HelloWorld/HelloWorld.java<br>oracle/HelloWorld/app.java<br></code></pre></div></td></tr></table></figure><h4 id="vi-编辑文件"><a href="#vi-编辑文件" class="headerlink" title="vi 编辑文件"></a>vi 编辑文件</h4><p>依次输入vi进入编辑页面，i进入insert状态，Esc退出编辑模式，输入:wq保存退出</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决域名无法访问的问题</title>
    <link href="/2019/09/22/Resolve-domain-name-unreachable-issue/"/>
    <url>/2019/09/22/Resolve-domain-name-unreachable-issue/</url>
    
    <content type="html"><![CDATA[<p>解决域名无法访问的问题<br>最近有空整理我之前写的网站，发现可以通过ip+项目地址访问网站，如<a href="http://101.132.116.203:8080/MyBlog/">http://101.132.116.203:8080/MyBlog/</a>    但是通过域名访问不了。<img src="https://s2.ax1x.com/2019/09/28/uQNqKI.png" alt="拒绝请求"><br>可以ping通域名。服务器防火墙已关闭。安全组也配置了端口开放 。在阿里云上进行检测。</p><img src="https://s2.ax1x.com/2019/09/28/uQNjVf.png" alt="检测">查看80端口是否处于监听状态。发现并没有。一开始我以为是服务器防火墙需要放行80端口，搜了一堆怎么开放80端口的，不行。<img src="https://s2.ax1x.com/2019/09/28/uQNLrt.png" alt="端口监听"><p>提工单阿里云技术人员说我是用8080端口服务的，用域名自然是访问不了的。需要域名+8080端口才能访问，一试还真可以。但是我想还需要用80端口访问。于是进入修改/root/java/tomcat/apache-tomcat-8.5.34/conf目录下的sever.xml文件，启动80端口监听。<br>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;<br>           connectionTimeout=&quot;20000&quot;<br>           redirectPort=&quot;8443&quot; /&gt;<br>改为<br>&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;<br>           connectionTimeout=&quot;20000&quot;<br>           redirectPort=&quot;8443&quot; /&gt;</p><p>查看端口监听,可以看到8080端口没有了，出现了80端口监听。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz bin]# netstat -an | grep 80<br>tcp        0      0 0.0.0.0:8009            0.0.0.0:*               LISTEN     <br>tcp        4      0 0.0.0.0:80              0.0.0.0:*               LISTEN     <br>tcp        1      0 172.19.93.164:80        180.111.33.207:11809    CLOSE_WAIT <br>tcp        0      0 172.19.93.164:26252     100.100.30.26:80        ESTABLISHED<br>tcp        0     52 172.19.93.164:22        180.111.33.207:11847    ESTABLISHED<br>tcp        0      0 172.19.93.164:80        180.111.33.207:11834    ESTABLISHED<br>tcp        0      0 172.19.93.164:1521      101.132.116.203:46580   ESTABLISHED<br>tcp      527      0 172.19.93.164:80        180.111.33.207:11833    ESTABLISHED<br>tcp      553      0 172.19.93.164:80        180.111.33.207:11808    ESTABLISHED<br>tcp        0      0 172.19.93.164:22        180.111.33.207:9649     ESTABLISHED<br></code></pre></div></td></tr></table></figure><p>重启Tomcat。这里我又犯了一个错误。我直接启动tomcat，要知道Tomcat本来就运行着的，这样一点用也没有。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz bin]# cd /root/java/tomcat/apache-tomcat-8.5.34/bin<br>[root@izuf66fm097gavs15ngjfvz bin]# ./satrtup.sh<br></code></pre></div></td></tr></table></figure><p>正确做法应该先关闭Tomcat，再启动。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz bin]# cd /root/java/tomcat/apache-tomcat-8.5.34/bin<br>[root@izuf66fm097gavs15ngjfvz bin]# ./shutdown.sh<br>[root@izuf66fm097gavs15ngjfvz bin]# ./startup.sh<br>Using CATALINA_BASE:   /root/java/tomcat/apache-tomcat-8.5.34<br>Using CATALINA_HOME:   /root/java/tomcat/apache-tomcat-8.5.34<br>Using CATALINA_TMPDIR: /root/java/tomcat/apache-tomcat-8.5.34/temp<br>Using JRE_HOME:        /root/java/jdk/jdk1.8.0_181/jre<br>Using CLASSPATH:       /root/java/tomcat/apache-tomcat-8.5.34/bin/bootstrap.jar:/root/java/tomcat/apache-tomcat-8.5.34/bin/tomcat-juli.jar<br>Tomcat started.<br></code></pre></div></td></tr></table></figure><p>访问baobaodz.com就可以访问了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>云服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>七牛云存储配置服务器CNAME</title>
    <link href="/2018/11/16/Niuyun-Storage-CNAME-Configuration/"/>
    <url>/2018/11/16/Niuyun-Storage-CNAME-Configuration/</url>
    
    <content type="html"><![CDATA[<p>最近邮箱收到七牛云通知说，测试域名即将到期，这就意味着之前的图片外链将失效。为了能够继续存储图片等资源，需要自己创建自定义域名。</p><a id="more"></a><p><img src="https://s2.ax1x.com/2019/10/13/ujTjVx.png" alt="测试域名"></p><h3 id="配置CNAME"><a href="#配置CNAME" class="headerlink" title="配置CNAME"></a>配置CNAME</h3><p>步骤1：在七牛云域名管理中创建域名。加速域名设置二级域名。因为之前一级域名baobaodz.com已经备案，所以二级域名可以直接用。</p><p><img src="https://s2.ax1x.com/2019/10/13/uj7Gd0.png" alt="image.png"></p><p>步骤2：点击后确定，查看CNAME，并复制</p><p><img src="https://s2.ax1x.com/2019/10/13/uj7UWF.png" alt="CNAME"></p><p>步骤3：进入阿里云控制台，域名-域名配置，新增一条记录</p><p><img src="https://s2.ax1x.com/2019/10/13/uj70y9.png" alt="image.png"></p><p>其中</p><div class="hljs code-wrapper"><pre><code>记录类型改为CNAME主机记录为之前步骤1中的加速域名前缀。记录值为CNMAE的值。</code></pre></div><p>点击确定。大约几分钟后便可生效。这个时候，访问resource.baobaodz.com会显示{&quot;error&quot;:&quot;Document not found&quot;}，表示成功解析，只是还没有访问到资源。需要resource.baobaodz.com/image/文件目录形式访问</p><p>步骤4：回到七牛云中，在对象存储-内容管理-默认外链域名改为刚才设置的，保存默认域名</p><p><img src="https://s2.ax1x.com/2019/10/13/uj7BLR.png" alt="image.png"></p><p>步骤5：更改图片存储路径，更改项目链接地址</p><p>&lt;a href=’<a href="http://resource.baobaodz.com/image/preview/articlepreview&quot;+data[i].aid+&quot;.jpg&#39;">http://resource.baobaodz.com/image/preview/articlepreview&quot;+data[i].aid+&quot;.jpg&#39;</a>&gt;</p><p>​    </p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><h4 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h4><p>baidu.com 是顶级域名， zhidao.baidu.com就是二级域名<br>baobaodz.com是顶级域名，resource.baobaodz.com就是二级域名</p><p>而形如&quot;abc.com/bbs&quot;的、采取目录形式的不能够称为二级域名，一般称之为&quot;网址&quot;。</p><p>使用二级域名的好处是一个是好记，另一个是搜索权重高于网址形式。</p><h4 id="CNAME解析"><a href="#CNAME解析" class="headerlink" title="CNAME解析"></a>CNAME解析</h4><p>CNAME别名解析就是一个或者多个域名指向另外一个以域名为基础的服务器上。与之区别的A记录是IP解析，将域名解析成对应的服务器的IP地址。</p><p>CNAME存在的好处是，如果涉及到更改服务器IP地址，如果使用A记录解析，服务器更换IP时，解析中的IP也需要相应变更，而使用别名解析，由于使用的是域名，所以即使指向的服务器IP发生变化，也不需要重新修改。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java Web</tag>
      
      <tag>云服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javaweb项目部署</title>
    <link href="/2018/10/13/Javaweb-Project-Deployment/"/>
    <url>/2018/10/13/Javaweb-Project-Deployment/</url>
    
    <content type="html"><![CDATA[<h3 id="购买域名和服务器"><a href="#购买域名和服务器" class="headerlink" title="购买域名和服务器"></a>购买域名和服务器</h3><h4 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h4><p>阿里云域名和服务器对新注册用户，特别是学生认证用户有很大优惠。买了一年的云服务器ECS，先玩个一年。</p><p>具体可看<a href="https://promotion.aliyun.com/ntms/act/campus2018.html">阿里云云翼计划</a></p><p><img src="https://s2.ax1x.com/2019/10/13/ujGa0U.png" alt="image.png"></p><h4 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h4><p>链接：<a href="https://wanwang.aliyun.com/domain/com/">域名注册</a><br>com大概45元/年，cn29元/年。top9元/年。看着买。新注册阿里云会有20元优惠券。可惜我当时注册了忘了用了。<br>买好域名别忘了去域名解析。也就是把域名和IP地址关联起来。登录管理控制台-域名-添加解析记录</p><p><img src="https://s2.ax1x.com/2019/10/13/ujGd7F.png" alt="image.png"></p><p>等个十分钟就可以按域名访问了。</p><h3 id="配置java环境和tomcat"><a href="#配置java环境和tomcat" class="headerlink" title="配置java环境和tomcat"></a>配置java环境和tomcat</h3><p>因为我服务器端是Linux操作系统，为了方便操作，需要两个工具</p><p>1.xshell远程连接工具</p><p><a href="http://www.netsarang.com/download/software.html">官网下载</a></p><p>其实在购买云服务器后在管理后台就有远程连接，可以在线远程连接，但是为了方便操作下载这个工具。<br><img src="https://s2.ax1x.com/2019/10/13/ujGDh9.png" alt="image.png"><br>2.Xftp 传输文件工具</p><p><a href="http://www.netsarang.com/products/xfp_overview.html">官网下载</a></p><p>此工具和xshell是一家的，可以方便的复制粘贴把本机文件传输到服务器。</p><p>具体参考<a href="https://www.jianshu.com/p/2604e53a7f6a?from=singlemessage">阿里云ECS建网站（建站）超详细全套完整图文教程！菜鸟必看！</a>讲的非常详细。</p><h3 id="配置服务器上的数据库"><a href="#配置服务器上的数据库" class="headerlink" title="配置服务器上的数据库"></a>配置服务器上的数据库</h3><p>java环境和tomcat安装好后，在服务器安装数据库。这里我选择的是Oracle 11g这个产品。<br>具体安装过程可参考<a href="https://blog.csdn.net/sinat_32998977/article/details/79437014">阿里云 CentOS7.4，静默安装Oracle11g2的教程</a>。</p><p>总结一下常用的命令：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">su - oracle #切换到oracle用户<br>lsbrctl start #启动监听<br>lsnrctl stop #停止监听<br>sdnrctl status #查看listener的状态<br><br>sqlplus &quot;/as sysdba&quot; #以sysdba的身份登陆<br>shutdown #关闭数据库服务<br>strartup #启动数据库服务<br></code></pre></div></td></tr></table></figure><h3 id="pl-sql-dev远程连接数据库"><a href="#pl-sql-dev远程连接数据库" class="headerlink" title="pl/sql dev远程连接数据库"></a>pl/sql dev远程连接数据库</h3><p>数据库搞好之后，我想需要个工具来操作服务器上的数据库。先选择了navicate for Oracle，但是正版需要1000多块钱，找前找后也没破解版。虽然只有14天免费试用，但是可以连接到远端服务器。</p><p><img src="https://s2.ax1x.com/2019/10/13/ujGy11.png" alt="image.png"></p><p>但是这样始终不是长久之计啊。于是选择了pl/sql developer。因为我本机之前已经装了Oracle客户端，所以可以在C:\oracle\product\10.2.0\db_1\NETWORK\ADMIN下tnsnames.ora文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">alioracle=<br>(DESCRIPTION =<br>(ADDRESS = (PROTOCOL = TCP)(HOST = 101.132.116.203)(PORT = 1521))<br>(CONNECT_DATA =<br>  (SERVER = DEDICATED)<br>  (SERVICE_NAME = orcl11g)<br>)<br>)<br></code></pre></div></td></tr></table></figure><p>其中</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">alioracle：连接时显示的本地名称，可以任意取<br>ADDRESS ：链接地址 <br>PROTOCOL ：使用的协议，一般为TCP <br>HOST ：服务器ip地址 <br>PORT ：服务器监听端口号，Oracle默认为1521 <br>SERVICE_NAME ：服务器服务名称<br></code></pre></div></td></tr></table></figure><p>然后打开pl/sql developer工具就会在database的下拉选项中看到刚才起的本地连接名</p><p><img src="https://s2.ax1x.com/2019/10/13/ujG2nK.png" alt="image.png"></p><p>点击ok但是就是登不上去显示</p><div class="hljs code-wrapper"><pre><code>ERROR: ORA-12514: TNS: 监听程序当前无法识别连接描述符中请求的服务</code></pre></div><p>然后本地cmd中tnsping alioracle 是没问题的</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">C:\Users\Administrator&gt;tnsping alioracle<br><br>TNS Ping Utility for 32-bit Windows: Version 10.2.0.1.0 - Production on 11-10月-<br>2018 11:28:54<br><br>Copyright (c) 1997, 2005, Oracle.  All rights reserved.<br><br>已使用的参数文件:<br>C:\oracle\product\10.2.0\db_1\network\admin\sqlnet.ora<br><br>已使用 TNSNAMES 适配器来解析别名<br>Attempting to contact (DESCRIPTION = (ADDRESS = (PROTOCOL = TCP)(HOST = 101.132.<br>116.203)(PORT = 1521)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = orcl11g)))<br>OK (80 毫秒)<br></code></pre></div></td></tr></table></figure><p>弄了好久才明白：</p><p>这里的连接标识符即SERVICE_NAME（网络别名、网络服务名、主机连接字符串、主机名) tnsping 是用来执行oracle 网络别名SERVICE_NAME的解析工作。会解析出ORACLE client中设定的服务器IP与监听端口。</p><p>因此tnsping alioracle 的时候只是根据tnsname.ora文件中记录的这个字符串”alioracle”相应的IP地址去查看对应的端口是否开放，而不会去验证SERVICE_NAME是否正确，SERVICE_NAME如果配置的不正确是不能连接上数据库的。</p><p>那这个SERVICE_NAME在哪看呢？</p><p>在Xshell中远程连接服务器输入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz ~]# su - oracle<br><br>[oracle@izuf66fm097gavs15ngjfvz ~]$ sqlplus &quot;/as sysdba&quot;<br><br><span class="hljs-meta">SQL&gt;</span><span class="bash"> show parameter service_name</span><br><br>NAME     TYPE VALUE<br>------------------------------------ ----------- ------------------------------<br>service_names string orcl11g.us.oracle.com<br></code></pre></div></td></tr></table></figure><p>​    </p><p>可以看出服务器端的Oracle数据库service_name是orcl11g.us.oracle.com，而我在tnsnames.ora中的SERVICE_NAME = orcl11g。所以会显示无法识别连接描述符。改正之后，豁然可以连接上去了。</p><p>参考文章：</p><ul><li>  <a href="https://blog.csdn.net/iteye_13903/article/details/82164884">tnsping通却连接不上数据库</a></li><li>  <a href="https://blog.csdn.net/beihangyjs/article/details/5732508">plSQL技巧：“tns:无法解析指定的连接标识符”问题详解</a></li></ul><h3 id="项目部署到服务器"><a href="#项目部署到服务器" class="headerlink" title="项目部署到服务器"></a>项目部署到服务器</h3><p>查看服务器端数据库名</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">SQL&gt;</span><span class="bash"> select name from v<span class="hljs-variable">$database</span>;</span><br><br>NAME<br>---------<br>ORCL11G<br></code></pre></div></td></tr></table></figure><p>在项目WEB-INF目录下db.properties文件中<br>修改dataSource.jdbcUrl=jdbc: oracle: thin:@127.0.0.1: 1521:ORCL为</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">dataSource.jdbcUrl=jdbc:oracle:thin:@101.132.116.203:1521:ORCL11G<br></code></pre></div></td></tr></table></figure><p>注意：除此之外还需要加入对应的数据库驱动包。<br>客户端Oracle为10g，而服务器端Oracle为11g驱动包不一致还不行。于是在lib文件下加入jdbc_6g.jar。<br>然后在myeclipse中项目上右键-export-war文件。然后通过通过xftp工具将此war文件上传到tomcat目录下的webapps目录下。</p><p>然后在访问时通过ip地址+端口号+war包名+jsp文件就可以访问啦！例如：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">http://101.132.116.203:8080/MyBlog/jsp/index.jsp<br></code></pre></div></td></tr></table></figure><p>本地数据库的数据怎么办？<br>本来想着pl/sql dev中可以导出数据的sql脚本，但是因为表中含有列是clob类型，所以数据时无法导出的，但是建表语句还是可以查看的。<br>在新建表过程中出现了一个问题，就是中文字符乱码问题，所有中文字符变成了“？”。<br>查看数据库编码</p><div class="hljs code-wrapper"><pre><code>SQL&gt; select userenv(&#39;language&#39;) from dual;USERENV(&#39;LANGUAGE&#39;)----------------------------------------------------AMERICAN_AMERICA.WE8MSWIN1252</code></pre></div><p>可以看出数据库编码不是中文编码，于是在服务器上<br>vi /home/oracle/.bash_profile加入</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">export NLS_LANG=Simplified Chinese_CHINA.AL32UTF8<br></code></pre></div></td></tr></table></figure><p>会发现“？”都变成了中文字符“靠”。。。按理说应该起作用啊。百思不得其解。后来发现，这个数据库编码只对新数据有效，旧数据没作用的，因此只要把其删掉重新插入就显示正常了。</p><h3 id="去除项目名和端口号"><a href="#去除项目名和端口号" class="headerlink" title="去除项目名和端口号"></a>去除项目名和端口号</h3><p>项目部署后，输入<a href="http://101.132.116.203:8080/MyBlog/jsp/index.jsp">http://101.132.116.203:8080/MyBlog/jsp/index.jsp</a> 可访问。现在需求是访问<a href="http://baobaodz.com/">http://baobaodz.com</a> 也可以响应我们需要的内容。<br>1.去除端口号：<br>tomcat项目运行端口为8080，而我们平常访问的网站都是不带端口号的，即端口号是80，在阿里云安全组设置里面添加规则</p><p><img src="https://s2.ax1x.com/2019/10/13/ujGOHS.gif" alt="安全组.gif"></p><p>过一会就可以访问baobaodz.com/MyBlog/jsp/index.jsp<br>，如果不行，别忘了去域名备案。不备案的话，端口80是不给开放的。<br>备案的过程很麻烦，填写各种信息，还要拍照打印各种证明材料，不过有指引一步一步来。备案提交后，需要七八天的审核时间。<br>2.设置欢迎页<br>在项目文件的web.xml文件里，欢迎页面需要进行小小的改动，把原来默认的index.jsp改为jsp/index.jsp。因为首页我是放在jsp文件夹下的。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&lt; display-name&gt;MyBlog&lt; /display-name&gt;<br>&lt; welcome-file-list&gt;<br>    &lt; welcome-file&gt;jsp/index.jsp&lt; /welcome-file&gt;<br>&lt; /welcome-file-list&gt;<br></code></pre></div></td></tr></table></figure><p>除此之外，index.jsp文件中的所有跳转路径必须要改成绝对路径。这样css.js等资源才可以被正确访问。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&lt; a href=&quot;archives.jsp&quot;&gt;归档&lt;/a&gt;<br>&lt; a href=&quot;&lt;%=request.getContextPath()%&gt;/jsp/archives.jsp&quot;&gt;归档&lt; /a&gt;<br></code></pre></div></td></tr></table></figure><p>重启服务器tomcat，访问baobaodz.com/MyBlog就可以了。<br>3.去除项目名<br>需要进入tomcat根目录下conf文件夹下的server.xml，添加Context标签。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;<br>   &lt;Context  path=&quot;&quot;   docBase=&quot;/root/java/tomcat/apache-tomcat-8.5.34/webapps/MyBlog&quot;   debug=&quot;0&quot;/&gt;  <br>       &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot; prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot; pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;<br>   &lt;/Host&gt;<br></code></pre></div></td></tr></table></figure><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p>重启tomcat，刷新页面发现数据显示不了。出现500状态码错误，再去sqlplus连接数据库，显示无法监听，原来数据库连接不上了。原因是之前我重启Linux系统后，数据库没有重新启动，开启监听。</p><p>切到Oracle登录显示</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@izuf66fm097gavs15ngjfvz logs]# su - oracle<br>Last login: Fri Oct 12 17:52:55 CST 2018 on pts/0<br>-bash: export: `Chinese_CHINA.AL32UTF8&#x27;: not a valid identifier<br>[oracle@izuf66fm097gavs15ngjfvz ~]$ ls<br></code></pre></div></td></tr></table></figure><p>原因是之前修改Oracle字符集的时候，在windows系统文本编辑器上修改的，和Linux上修改会有出入。所以建议还是在Linux下修改比较稳妥。</p><p>编辑oracle用户的.bash_profile文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[oracle@node00 dse]$ vim ~/.bash_profile<br>找到<br>export NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.AL32UTF8&quot;<br></code></pre></div></td></tr></table></figure><p>发现没加双引号，加上使改变立即生效：</p><div class="hljs code-wrapper"><pre><code>[oracle@node00 dse]$ source ~/.bash_profile</code></pre></div><p>如果不解决这个问题的话，在以dba登录时，会出现如下错误</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[oracle@izuf66fm097gavs15ngjfvz ~]$ sqlplus &quot;/as sysdba&quot;<br><br>SQL*Plus: Release 11.2.0.1.0 Production on Wed Nov 14 18:55:03 2018<br><br>Copyright (c) 1982, 2009, Oracle.  All rights reserved.<br><br>ERROR:<br>ORA-12705: Cannot access NLS data files or invalid environment specified<br></code></pre></div></td></tr></table></figure><p>然后后续启动数据库，启动监听</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[oracle@izuf66fm097gavs15ngjfvz ~]$ sqlplus &quot;/as sysdba&quot;<br><span class="hljs-meta">SQL&gt;</span><span class="bash"> strartup</span><br><span class="hljs-meta">SQL&gt;</span><span class="bash"> <span class="hljs-built_in">exit</span></span><br>[oracle@izuf66fm097gavs15ngjfvz ~]$ lsnrctl start<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java Web</tag>
      
      <tag>云服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
