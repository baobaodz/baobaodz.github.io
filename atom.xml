<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://baobaodz.top</id>
    <title>baobaodz</title>
    <updated>2020-04-22T15:07:50.823Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://baobaodz.top"/>
    <link rel="self" href="https://baobaodz.top/atom.xml"/>
    <subtitle>keep humble , stay hungery</subtitle>
    <logo>https://baobaodz.top/images/avatar.png</logo>
    <icon>https://baobaodz.top/favicon.ico</icon>
    <rights>All rights reserved 2020, baobaodz</rights>
    <entry>
        <title type="html"><![CDATA[Dropwizard项目构建——pom.xml]]></title>
        <id>https://baobaodz.top/post/Dropwizard-project-build——pom</id>
        <link href="https://baobaodz.top/post/Dropwizard-project-build——pom">
        </link>
        <updated>2019-11-27T14:29:24.000Z</updated>
        <content type="html"><![CDATA[<h2 id="dropwizard项目构建pomxml">Dropwizard项目构建——pom.xml</h2>
<p>用IDEA导入项目文件夹，查看pom.xml文件。</p>
<blockquote>
<p>pom即 <strong>Project Object Model（项目对象模型）</strong>，它用于描述整个 Maven 项目，所以也称为 Maven 描述文件。</p>
</blockquote>
<p>纵观整个<code>pom</code>文件可以分为3部分。</p>
<ul>
<li>
<p>项目描述</p>
</li>
<li>
<p>项目依赖</p>
</li>
<li>
<p>项目构建</p>
</li>
</ul>
<h4 id="项目描述">项目描述</h4>
<pre><code class="language-xml">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

&lt;groupId&gt;com.baoabodz.example.dropwizard&lt;/groupId&gt;
&lt;artifactId&gt;ava-dropwizard&lt;/artifactId&gt;
&lt;version&gt;2.0.0-rc9-SNAPSHOT&lt;/version&gt;
&lt;packaging&gt;jar&lt;/packaging&gt;

&lt;name&gt;AvaDropwizard&lt;/name&gt;
</code></pre>
<p><code>modelVersion</code>：这个是 <code>pom</code>的版本号，目前为 <code>4.0.0</code> ，必须。</p>
<p><code>groupId、artifactId、version</code>：分别表示 <code>Maven</code> 项目的组织名、构件名、版本号，组成了关于原型（ <code>archetype</code> ）在<code>maven</code>仓库中为唯一坐标。</p>
<p><code>packaging</code>：表示该项目的打包方式，也就是执行<code>mvn package</code>命令后生成的文件格式，默认为 <code>jar</code>，也可以是<code>war</code>等</p>
<p><code>name、url</code>：表示该项目的名称与 <code>URL</code> 地址，意义不大，可以省略。</p>
<p>dependencies：定义该项目的依赖关系，其中每一个 dependency 对应一个 Maven 项目，可见 Maven 坐标再次出现，还多了一个 scope，表示作用域（下面会描述）。</p>
<p>build：表示与构建相关的配置，这里的 finalName 表示最终构建后的名称 smart-demo.war，这里的 finalName 还可以使用另一种方式来定义（下面会描述）。</p>
<h4 id="项目依赖">项目依赖</h4>
<pre><code class="language-xml">&lt;properties&gt;    
	&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  
    &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;    	
    &lt;dropwizard.version&gt;2.0.0-rc9&lt;/dropwizard.version&gt;    				
    &lt;mainClass&gt;com.baoabodz.example.dropwizard.AvaDropwizardApplication&lt;/mainClass&gt;
&lt;/properties&gt;
&lt;dependencyManagement&gt;    
    &lt;dependencies&gt;        
        &lt;dependency&gt;            
            &lt;artifactId&gt;dropwizard-dependencies&lt;/artifactId&gt;       
            &lt;version&gt;${dropwizard.version}&lt;/version&gt;            
            &lt;type&gt;pom&lt;/type&gt;            
            &lt;scope&gt;import&lt;/scope&gt;        
        &lt;/dependency&gt;    
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
&lt;dependencies&gt;    
    &lt;dependency&gt;        
        &lt;groupId&gt;io.dropwizard&lt;/groupId&gt;        
        &lt;artifactId&gt;dropwizard-core&lt;/artifactId&gt;    
    &lt;/dependency&gt;
&lt;/dependencies&gt;
</code></pre>
<p><code>properties</code> ：maven使用 <code>properties</code> 来自定义一些配置属性，例如：<code>project.build.sourceEncoding</code>（项目构建源码编码方式），可设置为 <code>UTF-8</code>，可防止中文乱码。也可定义相关构件包版本号，例如：<code>dropwizard.version</code>，便于日后统一升级。 在<code>properties</code> 里设置的属性都可以通过**<code>${}</code>**形式获取，如下面<code>dependencies</code>中的<code>${dropwizard.version}</code>则可以获取<code>&lt;dropwizard.version&gt;2.0.0-rc9&lt;/dropwizard.version&gt;</code>中的版本号。</p>
<h4 id="项目构建">项目构建</h4>
<p>项目构建部分主要是被build标签包裹的部分</p>
<details><summary>pom.xml的build部分</summary>
<pre><code class="language-xml">&lt;build&gt;    
    &lt;plugins&gt;        
        &lt;plugin&gt;            
            &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;            
            &lt;version&gt;3.1.1&lt;/version&gt;            
            &lt;configuration&gt;                
                &lt;createDependencyReducedPom&gt;true&lt;/createDependencyReducedPom&gt;                
                &lt;transformers&gt;                    
                    &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ServicesResourceTransformer&quot;/&gt;                    
                    &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;                        
                        &lt;mainClass&gt;${mainClass}&lt;/mainClass&gt;                    
                    &lt;/transformer&gt;                
                &lt;/transformers&gt;                
                &lt;!-- exclude signed Manifests --&gt;                
                &lt;filters&gt;                    
                    &lt;filter&gt;                        
                        &lt;artifact&gt;*:*&lt;/artifact&gt;                        
                        &lt;excludes&gt;                            
                            &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;                            
                            &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;                            
                            &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;                        
                        &lt;/excludes&gt;                    
                    &lt;/filter&gt;                
                &lt;/filters&gt;            
            &lt;/configuration&gt;            
            &lt;executions&gt;                
                &lt;execution&gt;                    
                    &lt;phase&gt;package&lt;/phase&gt;                    
                    &lt;goals&gt;                        
                        &lt;goal&gt;shade&lt;/goal&gt;                    
                    &lt;/goals&gt;                
                &lt;/execution&gt;            
            &lt;/executions&gt;        
        &lt;/plugin&gt;        
        &lt;plugin&gt;            
            &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;            
            &lt;version&gt;3.1.0&lt;/version&gt;            
            &lt;configuration&gt;                
                &lt;archive&gt;                    
                    &lt;manifest&gt;                        
                        &lt;addClasspath&gt;true&lt;/addClasspath&gt;                        
                        &lt;mainClass&gt;${mainClass}&lt;/mainClass&gt;                    
                    &lt;/manifest&gt;                
                &lt;/archive&gt;            
            &lt;/configuration&gt;        
        &lt;/plugin&gt;        
        &lt;plugin&gt;            
            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;            
            &lt;version&gt;3.8.0&lt;/version&gt;            
            &lt;configuration&gt;                
                &lt;source&gt;1.8&lt;/source&gt;                
                &lt;target&gt;1.8&lt;/target&gt;            
            &lt;/configuration&gt;        
        &lt;/plugin&gt;        
        &lt;plugin&gt;            
            &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;            
            &lt;version&gt;3.0.1&lt;/version&gt;            
            &lt;executions&gt;                
                &lt;execution&gt;                    
                    &lt;id&gt;attach-sources&lt;/id&gt;                    
                    &lt;goals&gt;                        
                        &lt;goal&gt;jar&lt;/goal&gt;                    
                    &lt;/goals&gt;                
                &lt;/execution&gt;            
            &lt;/executions&gt;        
        &lt;/plugin&gt;        
        &lt;plugin&gt;            
            &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;            
            &lt;version&gt;3.0.1&lt;/version&gt;            
            &lt;executions&gt;                
                &lt;execution&gt;                    
                    &lt;id&gt;attach-javadocs&lt;/id&gt;                    
                    &lt;goals&gt;                        
                        &lt;goal&gt;jar&lt;/goal&gt;                    
                    &lt;/goals&gt;                
                &lt;/execution&gt;            
            &lt;/executions&gt;        
        &lt;/plugin&gt;    
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
</details>
可以看到]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dropwizard项目构建——初始化]]></title>
        <id>https://baobaodz.top/post/Dropwizard-project-build——initialization</id>
        <link href="https://baobaodz.top/post/Dropwizard-project-build——initialization">
        </link>
        <updated>2019-11-20T14:36:58.000Z</updated>
        <content type="html"><![CDATA[<h2 id="maven创建项目">maven创建项目</h2>
<pre><code class="language-bash">$ mvn -B archetype:generate 
\ -DarchetypeGroupId=io.dropwizard.archetypes 
\ -DarchetypeArtifactId=java-simple 
\ -DarchetypeVersion=2.0.0-rc9
\ -DgroupId=com.baoabodz.example.dropwizard 
\ -DartifactId=ava-dropwizard 
\ -Dversion=2.0.0-rc9-SNAPSHOT
\ -Dname=AvaDropwizard
</code></pre>
<p>十几分钟后等待出现<code>BUILD SUCCESS</code></p>
<pre><code class="language-bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/ava
$ tree -A
.
└── ava-dropwizard
    ├── README.md
    ├── config.yml
    ├── pom.xml
    └── src
        ├── main
        │   ├── java
        │   │   └── com
        │   │       └── baoabodz
        │   │           └── example
        │   │               └── dropwizard
        │   │                   ├── AvaDropwizardApplication.java
        │   │                   ├── AvaDropwizardConfiguration.java
        │   │                   ├── api
        │   │                   ├── cli
        │   │                   ├── client
        │   │                   ├── core
        │   │                   ├── db
        │   │                   ├── health
        │   │                   └── resources
        │   └── resources
        │       ├── assets
        │       └── banner.txt
        └── test
            ├── java
            │   └── com
            │       └── baoabodz
            │           └── example
            │               └── dropwizard
            │                   ├── api
            │                   ├── client
            │                   ├── core
            │                   ├── db
            │                   └── resources
            └── resources
                └── fixtures

30 directories, 6 files
</code></pre>
<p>首先来说一下这个<code>mvn -B</code>是什么意思。<code>mvn -help</code>查看帮助可以看到</p>
<pre><code class="language-bash">-B,--batch-mode                        Run in non-interactive (batch)
</code></pre>
<p>是以非交互（批处理）模式执行命令。所谓非交互就是在执行的时候不会一步一步询问你<code>DgroupId</code>设置、<code>DartifactId</code>设置等，而是将需要的参数一次性输入。</p>
<pre><code class="language-bash">mvn -B rchetype:generate 相当于
mvn --batch-mode rchetype:generate 相当于
mvn rchetype:generate -DinteractiveMode=false
</code></pre>
<p><code>mvn archetype:generate</code>则调用<code>maven</code>的一个插件<code>maven-archetype-plugin</code>。这个插件可以直接生成一些模板或者原型，更加方便。这个命令是直接生成项目的一个指令：</p>
<pre><code>archetypeGroupId：原型唯一的标识 
archetypeArtifactId：原型的名字
DarchetypeVersion:模板的版本
DgroupId：项目或组织名，通常是成为包名
DartifactId：项目标识
Dversion：项目版本
Dname：项目名称
</code></pre>
<h2 id="问题及解决qr">问题及解决Q&amp;R</h2>
<p>我看在<code>dropwizard</code>的<code>github</code>官方例子中项目的版本为<code>2.0.0-rc13</code>，但是执行创建项目报错找不到这个版本</p>
<pre><code class="language-bash">[INFO] Archetype repository not defined. Using the one from [io.dropwizard.archetypes:java-simple:2.0.0-rc9] found in catalog remote
[INFO] Downloading from central: https://repo.maven.apache.org/maven2/io/dropwizard/archetypes/java-simple/2.0.0-rc13/java-simple-2.0.0-rc13.pom
[WARNING] The POM for io.dropwizard.archetypes:java-simple:jar:2.0.0-rc13 is missing, no dependency information available
......
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:3.1.2:generate (default-cli) on project standalone-pom: The desired archetype does not exist (io.dropwizard.archetypes:java-simple:2.0.0-rc13) -&gt; [Help 1]
</code></pre>
<p>按照它的提示在浏览器输入</p>
<pre><code class="language-bash">https://repo.maven.apache.org/maven2/io/dropwizard/archetypes/java-simple
</code></pre>
<p>可以看到版本从<code>1.3.9</code>跳到<code>2.0.0-x</code>版本</p>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2019/11/20/MhDG9I.png" alt="MhDG9I.png"></figure>
<p>改为<code>2.0.0-rc9</code> 执行 成功</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[tree命令用法（CMD/Git Bash/Linux）]]></title>
        <id>https://baobaodz.top/post/tree-command</id>
        <link href="https://baobaodz.top/post/tree-command">
        </link>
        <updated>2019-11-16T17:31:25.000Z</updated>
        <content type="html"><![CDATA[<p>在阅读到别人的技术文章时，经常会看到作者列出的文件树结构，清晰明了，而<code>tree</code>命令就可以实现这种效果。<br>
<img src="https://s2.ax1x.com/2019/11/18/MsR64x.md.png" alt="目录树示例.png"></p>
<h2 id="windows-cmd-的-tree命令"><code>Windows cmd</code> 的 <code>tree</code>命令</h2>
<p>在<code>cmd</code>中就集成了<code>tree</code> 命令</p>
<p>使用<code>tree /?</code>查看帮助信息</p>
<pre><code class="language-bash">G:\Dev\workspace\hola&gt;tree /?
以图形显示驱动器或路径的文件夹结构。

TREE [drive:][path] [/F] [/A]

   /F   显示每个文件夹中文件的名称。
   /A   使用 ASCII 字符，而不使用扩展字符。
</code></pre>
<p>主要命令</p>
<ul>
<li><code>tree</code></li>
<li><code>tree /a</code>(不区分大小写)</li>
<li><code>tree /f</code>(不区分大小写) 显示全部文件</li>
<li><code>tree /f &gt; tree.text</code> 将结果输出到tree.txt文件中</li>
</ul>
<p>tree  显示目录结构</p>
<pre><code class="language-bash">G:\Dev\workspace\hola&gt;tree
卷 软件&amp;开发 的文件夹 PATH 列表
卷序列号为 623A-7D30
G:.
└─hola-dropwizard
    └─src
        ├─main
        │  └─java
        │      └─com
        │          └─baobaodz
        │              └─example
        │                  └─dropwizard
        └─test
            └─java
                └─com
                    └─baobaodz
                        └─example
                            └─dropwizard
</code></pre>
<p><code>tree /A</code></p>
<pre><code class="language-bash">G:\Dev\workspace\hola&gt;tree /A
卷 软件&amp;开发 的文件夹 PATH 列表
卷序列号为 623A-7D30
G:.
\---hola-dropwizard
    \---src
        +---main
        |   \---java
        |       \---com
        |           \---baobaodz
        |               \---example
        |                   \---dropwizard
        \---test
            \---java
                \---com
                    \---baobaodz
                        \---example
                            \---dropwizard


</code></pre>
<p><code>tree /f</code> 不仅显示文件夹，还显示文件</p>
<pre><code class="language-bash">G:\Dev\workspace\hola&gt;tree /f
卷 软件&amp;开发 的文件夹 PATH 列表
卷序列号为 623A-7D30
G:.
└─hola-dropwizard
    │  pom.xml
    │
    └─src
        ├─main
        │  └─java
        │      └─com
        │          └─baobaodz
        │              └─example
        │                  └─dropwizard
        │                          App.java
        │
        └─test
            └─java
                └─com
                    └─baobaodz
                        └─example
                            └─dropwizard
                                    AppTest.java
</code></pre>
<h2 id="windows-git-bash-的-tree-命令"><code>Windows git bash</code> 的 <code>tree</code> 命令</h2>
<p>然而git中并没有集成<code>tree</code> 命令</p>
<pre><code class="language-bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola
$ tree
bash: tree: command not found
</code></pre>
<p>如果想使用<code>tree</code>命令</p>
<h3 id="第一种使用winpty命令">第一种：使用<code>winpty</code>命令</h3>
<p><code>winpty</code> 是一种提供与<code>cmd</code> 通信的软件包 ，可以通过调用<code>cmd</code>间接实现<code>tree</code>命令</p>
<pre><code class="language-bash">winpty tree.com 
winpty cmd //c tree 
</code></pre>
<p>结果</p>
<pre><code class="language-bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola
$ winpty tree.com
卷 软件&amp;开发 的文件夹 PATH 列表
卷序列号为 623A-7D30
G:.
└─hola-dropwizard
    └─src
        ├─main
        │  └─java
        │      └─com
        │          └─baobaodz
        │              └─example
        │                  └─dropwizard
        └─test
            └─java
                └─com
                    └─baobaodz
                        └─example
                            └─dropwizard
</code></pre>
<h3 id="第二种使用treeexe">第二种：使用<code>tree.exe</code></h3>
<ol>
<li>下载  <a href="http://gnuwin32.sourceforge.net/packages/tree.htm">tree for windows</a> 的 <code>Binaries Zip</code>格式，解压后找到bin目录下的<code>tree.exe</code></li>
<li>复制粘贴到<code>git</code>安装目录下的*usr/bin/*目录下</li>
<li>重新打开<code>git bash</code>，输入tree就有啦</li>
</ol>
<pre><code class="language-bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola
$ tree
.
`-- hola-dropwizard
    |-- pom.xml
    `-- src
        |-- main
        |   `-- java
        |       `-- com
        |           `-- baobaodz
        |               `-- example
        |                   `-- dropwizard
        |                       `-- App.java
        `-- test
            `-- java
                `-- com
                    `-- baobaodz
                        `-- example
                            `-- dropwizard
                                `-- AppTest.java

14 directories, 3 files
</code></pre>
<p>常用命令</p>
<pre><code class="language-bash">tree 列出所有文件(以虚线形式)

tree --help

tree -a 列出所有文件

tree -A 列出所有文件(以ANSI线图形缩进线形式)我叫它折线形式

tree -d 仅列出目录

tree -L level 显示目录深度

tree -o file 将结果输出到文件中
</code></pre>
<p><code>tree -a</code> 和<code>tree-A</code>的区别就是画线的不同，个人更喜欢-A折线形式的目录树。</p>
<pre><code class="language-bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola
$ tree -a
.
`-- hola-dropwizard
    |-- pom.xml
    `-- src
        |-- main
        |   `-- java
        |       `-- com
        |           `-- baobaodz
        |               `-- example
        |                   `-- dropwizard
        |                       `-- App.java
        `-- test
            `-- java
                `-- com
                    `-- baobaodz
                        `-- example
                            `-- dropwizard
                                `-- AppTest.java

14 directories, 3 files

baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola
$ tree -A
.
└── hola-dropwizard
    ├── pom.xml
    └── src
        ├── main
        │   └── java
        │       └── com
        │           └── baobaodz
        │               └── example
        │                   └── dropwizard
        │                       └── App.java
        └── test
            └── java
                └── com
                    └── baobaodz
                        └── example
                            └── dropwizard
                                └── AppTest.java

14 directories, 3 files
</code></pre>
<p><code>tree -LA 3</code> 列出三级目录下所有文件（以折线形式）</p>
<pre><code class="language-bash">baobaodz@DESKTOP-MN61DA5 MINGW64 /g/Dev/workspace/hola
$ tree -LA 3
.
└── hola-dropwizard
    ├── pom.xml
    └── src
        ├── main
        └── test
4 directories, 1 file
</code></pre>
<h2 id="linux-的-tree-命令"><code>Linux</code> 的 <code>tree</code> 命令</h2>
<p><code>Linux</code>自身也没有集成<code>tree</code>命令</p>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz ~]# tree
-bash: tree: command not found
</code></pre>
<p>需要下载，以<code>centOS 7</code>为例，执行 <code>yum -y install tree</code></p>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz ~]# yum -y install tree
Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
.....

Dependencies Resolved

================================================================================================================================

 Package                    Arch                         Version                               Repository                  Size
================================================================================================================================

Installing:
 tree                       x86_64                       1.6.0-10.el7                          base                        46 k

Transaction Summary
================================================================================================================================

Install  1 Package

Total download size: 46 k
Installed size: 87 k
Downloading packages:
tree-1.6.0-10.el7.x86_64.rpm                                                                             |  46 kB  00:00:00
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Installing : tree-1.6.0-10.el7.x86_64                                                                                     1/1
  Verifying  : tree-1.6.0-10.el7.x86_64                                                                                     1/1

Installed:
  tree.x86_64 0:1.6.0-10.el7

Complete!
</code></pre>
<p>常用命令 和<code>git bash</code>安装的<code>tree</code> 命令一致</p>
<pre><code class="language-bash">tree 列出所有文件(以虚线形式)
tree --help
tree -a 列出所有文件
tree -A 列出所有文件(以ANSI线图形缩进线形式)我叫它折线形式
tree -d 仅列出目录
tree -L level 显示目录深度
tree -o file 将结果输出到文件中
</code></pre>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz home]# tree
.
├── oracle
│   └── oradiag_oracle
│       └── diag
│           └── clients
│               └── user_oracle
│                   └── host_2814106076_76
│                       ├── alert
│                       │   └── log.xml
│                       ├── cdump
│                       ├── incident
│                       ├── incpkg
│                       ├── lck
│                       │   ├── AM_1096102193_3488045378.lck
│                       │   ├── AM_1096102262_3454819329.lck
│                       │   ├── AM_1744845641_3861997533.lck
│                       │   └── AM_3216668543_3129272988.lck
│                       ├── metadata
│                       │   ├── ADR_CONTROL.ams
│                       │   ├── ADR_INVALIDATION.ams
│                       │   ├── INC_METER_IMPT_DEF.ams
│                       │   └── INC_METER_PK_IMPTS.ams
│                       ├── stage
│                       ├── sweep
│                       └── trace
│                           └── sqlnet.log
└── swap

15 directories, 11 files
</code></pre>
<h2 id="windows-cmd的tree和-git-bash的tree的区别"><code>Windows cmd</code>的<code>tree</code>和 <code>git bash</code>的<code>tree</code>的区别</h2>
<p><code>Windows</code>集成的<code>tree</code>命令是在<em>C:\Windows\System32</em>目录下的<code>tree.com</code>文件起的作用</p>
<p><code>git bash</code> 的<code>tree</code>命令是通过引入<code>tree.exe</code>到<em>Git\usr\bin</em>中而实现的</p>
<p>在命令格式上，<code>cmd tree</code> 使用<code>/</code>来作为参数，git bash tree使用<code>-</code>作为输入参数；另外前者不区分大小写，<code>/f</code>和<code>/F</code>的作用一致。而<code>git bash tree</code>不仅区分大小写，而且大写小写参数不同作用也往往不同：</p>
<p>如</p>
<pre><code class="language-bash">tree -d 仅显示文件夹
tree -D 以显示日期目录树
</code></pre>
<p>其次<code>cmd tree</code>默认显示是以折线显示目录树，而<code>git bash tree</code>默认以虚线形式显示目录树，这点与Linux tree命令显示的不一样。</p>
<h2 id="参考文章">参考文章</h2>
<p><a href="https://my.oschina.net/snowdreams1006/blog/3045419">git 入门教程之 git bash 竟然不支持 tree 命令</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux常用命令汇总（二）]]></title>
        <id>https://baobaodz.top/post/Commonly-Used-Linux-Command-Summary-Ⅱ</id>
        <link href="https://baobaodz.top/post/Commonly-Used-Linux-Command-Summary-Ⅱ">
        </link>
        <updated>2019-11-10T08:51:42.000Z</updated>
        <summary type="html"><![CDATA[<p>总结一些在日常工作中用到的查看磁盘占用的linux命令</p>
]]></summary>
        <content type="html"><![CDATA[<p>总结一些在日常工作中用到的查看磁盘占用的linux命令</p>
<!-- more -->
<h3 id="系统磁盘占用">系统磁盘占用</h3>
<h4 id="df-h-查看磁盘空间">df -h 查看磁盘空间</h4>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz ~]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda1        40G   28G  9.3G  76% /
devtmpfs        909M     0  909M   0% /dev
tmpfs           920M  479M  441M  53% /dev/shm
tmpfs           920M  560K  919M   1% /run
tmpfs           920M     0  920M   0% /sys/fs/cgroup
tmpfs           184M     0  184M   0% /run/user/0
</code></pre>
<h4 id="du-sh-查看当前目录总共占的容量而不单独列出各子项占用的容量">du -sh : 查看当前目录总共占的容量,而不单独列出各子项占用的容量</h4>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz ~]# du -sh
1.4G    .
</code></pre>
<h4 id="du-ah-max-depth1-查看根目录下各个文件占用情况">du -ah --max-depth=1  /   查看根目录下各个文件占用情况</h4>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz ~]# du -ah --max-depth=1 /
2.1G    /home
560K    /run
68K     /tmp
2.2G    /opt
1.8G    /usr
16K     /lost+found
4.0K    /srv
0       /lib
0       /.autorelabel
du: cannot access ‘/proc/10862/task/10862/fd/4’: No such file or directory
du: cannot access ‘/proc/10862/task/10862/fdinfo/4’: No such file or directory
du: cannot access ‘/proc/10862/fd/3’: No such file or directory
du: cannot access ‘/proc/10862/fdinfo/3’: No such file or directory
0       /proc
4.0K    /mnt
172M    /boot
0       /lib64
479M    /dev
0       /sbin
0       /sys
1.4G    /root
0       /bin
4.0K    /media
38M     /etc
738M    /var
20G     /data
0       /profile
29G     /
</code></pre>
<p>max-depth=1表示目录深度，如果改成max-depth=2，则会查询二级目录的大小</p>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz ~]# du -ah --max-depth=2 /
2.1G    /home/swap
388K    /home/oracle
2.1G    /home
.....
</code></pre>
<p>/代表根目录，换成其他目录du -ah --max-depth=1 /home</p>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz ~]# du -ah --max-depth=1  /home
2.1G    /home/swap
388K    /home/oracle
2.1G    /home
</code></pre>
<h4 id="du-h-sort-hr-按文件大小kmg排序">du -h *|sort -hr 按文件大小（K/M/G）排序</h4>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz oracle]# du -h ./ --max-depth=1 | sort -hr
18G     ./
8.2G    ./oradata
5.3G    ./diag
4.0G    ./product
9.4M    ./flash_recovery_area
2.1M    ./admin
104K    ./cfgtoollogs
4.0K    ./checkpoints
</code></pre>
<h4 id="du-s-sort-nr-按文件字节大小排序">du -s * | sort -nr 按文件字节大小排序</h4>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz oracle]#  du -s * | sort -nr
8530932 oradata
5452148 diag
4178284 product
9536    flash_recovery_area
2056    admin
104     cfgtoollogs
4       checkpoints
</code></pre>
<h4 id="du-和-df-的区别">du 和 df 的区别</h4>
<p><code>du(disk usage)</code>会把指定目录下所有文件、目录、目录下的文件都统计。也就是说我们能在文件系统里面看到的文件才会被du统计。</p>
<p>而 <code>df(disk free)</code>不光考虑文件占用空间，还统计被命令和程序占用的空间 。因此df统计的会大于du统计的，这也是有时候有df查看空间已满，而du还有空间的原因。</p>
<p>比如说在清理磁盘空间时，rm掉一些日志文件后，发现磁盘空间并没有释放，根本是原因是文件被进程打开中，文件描述符未被释放，而这些以删除的文件而依然被占用的文件df会统计，du并不会。</p>
<p>查看哪些文件被删除但是依然被占用</p>
<pre><code class="language-bash">yum install lsof
lsof | grep deleted
</code></pre>
<p>结果</p>
<pre><code class="language-bash">[root@izuf66fm097gavs15ngjfvz /]# lsof | grep deleted
oracle    20475        oracle    8u      REG              253,1          0    1311391 /data/oracle/product/11.2.0/db_1/dbs/lkinstorcl11g (deleted)
oracle    20475        oracle    9w      REG              253,1      14418     528000 /data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trc (deleted)
oracle    20475        oracle   10w      REG              253,1        246     528001 /data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trm (deleted)
oracle    20908        oracle    8u      REG              253,1          0    1311391 /data/oracle/product/11.2.0/db_1/dbs/lkinstorcl11g (deleted)
oracle    20908        oracle    9w      REG              253,1      14418     528000 /data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trc (deleted)
oracle    20908        oracle   10w      REG              253,1        246     528001 /data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trm (deleted)
oracle    20912        oracle    8u      REG              253,1          0    1311391 /data/oracle/product/11.2.0/db_1/dbs/lkinstorcl11g (deleted)
......
</code></pre>
<p>注：可以利用<code>echo &quot;&quot; &gt; &quot;/data/oracle/diag/rdbms/orcl11g/orcl11g/trace/orcl11g_ora_20227.trc&quot;</code>删除日志文件</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2019-11第二周】技能点]]></title>
        <id>https://baobaodz.top/post/2019-11-second-week</id>
        <link href="https://baobaodz.top/post/2019-11-second-week">
        </link>
        <updated>2019-11-07T16:38:42.000Z</updated>
        <summary type="html"><![CDATA[<p>这一周主要有：将IDEA设置eclipse风格的快捷键,Eclipse常用快捷键</p>
]]></summary>
        <content type="html"><![CDATA[<p>这一周主要有：将IDEA设置eclipse风格的快捷键,Eclipse常用快捷键</p>
<!-- more -->
<h3 id="friday">Friday</h3>
<h4 id="将idea设置eclipse风格的快捷键">将IDEA设置eclipse风格的快捷键</h4>
<p><code>Files-Settings-keymap</code>选择<code>Eclipse</code>即可</p>
<figure data-type="image" tabindex="1"><a href="https://imgchr.com/i/MeFwNQ"><img src="https://s2.ax1x.com/2019/11/09/MeFwNQ.md.png" alt="MeFwNQ.md.png"></a></figure>
<p>还要设置Alt+/代码提示快捷键</p>
<p><code>File -settings -keymap</code> 在搜索框中搜索 <code>completion</code><br>
选择<code>Cyclic Expand word</code>右键选择 <code>Remove Alt+/</code></p>
<figure data-type="image" tabindex="2"><a href="https://imgchr.com/i/MekYG9"><img src="https://s2.ax1x.com/2019/11/09/MekYG9.md.png" alt="MekYG9.md.png"></a></figure>
<p>在下方选择<code>Class Name Completion</code> 右键 <code>Remove Ctrl+Alt+</code>空格 并更改快捷键为<code>Alt+/</code></p>
<figure data-type="image" tabindex="3"><a href="https://imgchr.com/i/MekRMt"><img src="https://s2.ax1x.com/2019/11/09/MekRMt.md.png" alt="MekRMt.md.png"></a></figure>
<h4 id="eclipse常用快捷键">Eclipse常用快捷键</h4>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
<th>好处</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alt+/</td>
<td>补全提示代码</td>
<td>省去多余的敲键盘啦</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>删除鼠标所在行或选中的多行</td>
<td>不用选中再删除啦</td>
</tr>
<tr>
<td>Crtl+Alt+↓</td>
<td>向下复制</td>
<td>不用选中再复制粘贴啦</td>
</tr>
<tr>
<td>Crtl+Alt+↑</td>
<td>向上复制</td>
<td></td>
</tr>
<tr>
<td>Alt+↓</td>
<td>向下移动</td>
<td>不用剪切啦</td>
</tr>
<tr>
<td>Alt+↑</td>
<td>向上移动</td>
<td></td>
</tr>
<tr>
<td>Shift+Enter</td>
<td>插入空行</td>
<td>鼠标不用再放到行末回车啦🤞🤞🤞🤞🤞</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>注释</td>
<td></td>
</tr>
<tr>
<td>Alt+Enter</td>
<td>导入所需的包</td>
<td></td>
</tr>
<tr>
<td>Ctrl+Shift+O</td>
<td>移除没有用到的包</td>
<td>不用手动删除啦</td>
</tr>
<tr>
<td>Ctrl+Shift+X</td>
<td>将所选全部大写</td>
<td></td>
</tr>
<tr>
<td>Ctrl+Shift+Y</td>
<td>将所选全部小写</td>
<td></td>
</tr>
</tbody>
</table>
<p>查找、搜索、跳转快捷键</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
<th>好处</th>
</tr>
</thead>
<tbody>
<tr>
<td>Ctrl+K</td>
<td>向下循环定位选中字符</td>
<td></td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>打开搜索弹窗或底部显示栏</td>
<td></td>
</tr>
<tr>
<td>Ctrl+G</td>
<td>所选字符在项目和library中的声明</td>
<td>快速定位到某个类或方法在哪被引用</td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>查找项目中与之匹配的类</td>
<td>IDEA呼出弹窗，可以搜索全部、文件、类等</td>
</tr>
<tr>
<td>F3</td>
<td>跳转到类或方法声明的地方</td>
<td></td>
</tr>
<tr>
<td>Alt+←</td>
<td>返回上一次所在文件</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2019-11第一周】技能点]]></title>
        <id>https://baobaodz.top/post/2019-11-first-week</id>
        <link href="https://baobaodz.top/post/2019-11-first-week">
        </link>
        <updated>2019-11-01T14:06:10.000Z</updated>
        <summary type="html"><![CDATA[<p>这一周主要有：premire渲染器,CPU和GPU的区别,maven常用命令,aria2</p>
]]></summary>
        <content type="html"><![CDATA[<p>这一周主要有：premire渲染器,CPU和GPU的区别,maven常用命令,aria2</p>
<!-- more -->
<h3 id="monday">Monday</h3>
<h4 id="premire渲染器">premire渲染器</h4>
<p>在将视频拖入pr轨道时候，时间轴上方呈现红色，表示没有渲染，播放预览会卡顿现象，而且渲染时CPU占用到99%。正常情况下应该为黄色。</p>
<figure data-type="image" tabindex="1"><img src="https://s2.ax1x.com/2019/11/02/Kbs2GR.png" alt="image-20191101231359836"></figure>
<p>在文件-项目设置-视频渲染和回放中，渲染程序只支持【仅Mercury Playback Engine软件】。</p>
<figure data-type="image" tabindex="2"><img src="https://s2.ax1x.com/2019/11/02/Kbs6IJ.png" alt="捕获1"></figure>
<p>原因是使用的系统自带的核显造成的，系统安装的独立显卡并未使用上。更新或安装独立显卡驱动即可。再次打开项目设置，可以看到出现了【Mercury Playback Engine GPU加速（OpenCL）】的选项，选择后会发现红线现象消失。</p>
<ul>
<li>Mercury Playback Engine软件： 纯CPU处理</li>
<li>Mercury Playback Engine GPU加速（OpenCL）：针对AMD显卡/Intel集显</li>
</ul>
<h4 id="cpu和gpu的区别">CPU和GPU的区别</h4>
<p>CPU（ Central Processing Unit）即中央处理器</p>
<p>GPU（Graphics Processing Unit）即图形处理器</p>
<p>GPU是显卡的&quot;心脏&quot;，也就相当于CPU在电脑中的作用 。CPU是通用计算，GPU是专用计算。</p>
<p>GPU的强项是并行运算能力比CPU强（多个不同任务的并行运算GPU也无法胜任，GPU只适合处理单个可并行任务的并行运算），而不是浮点运算能力强。</p>
<p>引用知乎上的一个回答</p>
<blockquote>
<p>当你操作电脑的时候，为了完成某项工作，需要电脑帮你工作，就像计算某个题目那样。计算题目，理解题目并且整理出解题的步骤以及解法，那是CPU的事情。但是解题的过程需要用到的众多计算，则需要一帮不需要很高逻辑理解力的计算者完成，他们只需要负责其中很简单但是数量又很大的简单运算就行了，最后他们把各自运算的结果交出来给CPU整理，那么这群计算者就是GPU。这就是一个博士带着100个小学生的意思了</p>
</blockquote>
<p>GPU有非常多的厂商都生产，和CPU一样，比较知名的有AMD、NVIDIA、Intel3个生产厂商。</p>
<table>
<thead>
<tr>
<th>厂商</th>
<th>nVidia GPU</th>
<th>AMD GPU</th>
<th>Intel MIC</th>
<th>nVidia Tegra</th>
</tr>
</thead>
<tbody>
<tr>
<td>协议</td>
<td>CUDA C/C++</td>
<td>OpenCL</td>
<td>MIC OpenMP</td>
<td>CUDA</td>
</tr>
</tbody>
</table>
<h3 id="saturday">Saturday</h3>
<h4 id="maven常用命令">maven常用命令</h4>
<ul>
<li>清理 mvn clean：将以前编译得到的旧文件class字节码文件删除</li>
<li>编译 mvn compile：将java源程序编译成class字节码文件</li>
<li>测试 mvn test：自动测试，自动调用junit程序</li>
<li>报告 mvn report：测试程序执行的结果</li>
<li>打包 mvn package：动态Web工程打War包，java工程打jar包</li>
<li>安装 mvn install：Maven特定的概念-----将打包得到的文件复制到“仓库”中的指定位置</li>
<li>部署 mvn deploy：将动态Web工程生成的war包复制到Servlet容器下，使其可以运行</li>
</ul>
<h3 id="sunday">Sunday</h3>
<p>aria2 是一款支持多种协议的轻量级命令行下载工具。有以下特性：</p>
<ul>
<li>多线程连线：aria2 会自动从多个线程下载文件，并充分利用你的带宽；</li>
<li>轻量：运行时不会占用过多资源，根据官方介绍，内存占用通常在 4MB~9MB，使用 BitTorrent 协议，下行速度 2.8MB/s 时 CPU 占用率约 6%；</li>
<li>全功能 BitTorrent 客户端；</li>
<li>支持 RPC 界面远程控制</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[multiple parameters with no annotation. Unable to resolve the injection source]]></title>
        <id>https://baobaodz.top/post/multiple-parameters-with-no-annotation</id>
        <link href="https://baobaodz.top/post/multiple-parameters-with-no-annotation">
        </link>
        <updated>2019-10-17T15:51:34.000Z</updated>
        <content type="html"><![CDATA[<p>在dropwizard中resource中想通过POST方法增加书籍，接收两个参数报错：</p>
<pre><code>package com.baobaodz.example.dropwizard.resources;

import com.baobaodz.example.dropwizard.api.Book;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.net.InetAddress;
import java.net.UnknownHostException;
/**
*@author baobaodz
*/
@Path(&amp;quot;/api&amp;quot;)
@Produces(MediaType.APPLICATION_JSON)
public class HolaRestResource {

	@Path(&amp;quot;/book&amp;quot;)
	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	public Book saveSingleBook(HttpServletRequest request,Book book){
		Book newBook = new Book();
		newBook.setId(book.getId());
		newBook.setName(book.getName());
		newBook.setAuthor(book.getAuthor());
		newBook.setPublishDate(book.getPublishDate());
		return newBook;
	}
}
</code></pre>
<p>报错：</p>
<pre><code>[[FATAL] Method public com.baobaodz.example.dropwizard.api.Book com.baobaodz.example.dropwizard.resources.HolaRestResource.saveSingleBook(javax.servlet.http.HttpServletRequest,com.baobaodz.example.dropwizard.api.Book) on resource class com.baobaodz.example.dropwizard.resources.HolaRestResource contains multiple parameters with no annotation. Unable to resolve the injection source.; 
.......
io.dropwizard.jersey.setup.JerseyServletContainer-38aafb53@4297147d==io.dropwizard.jersey.setup.JerseyServletContainer,jsp=null,order=1,inst=false
</code></pre>
<p>注意这一句</p>
<p><code>HolaRestResource contains multiple parameters with no annotation. Unable to resolve the injection source.</code></p>
<p>大意就是<code>HolaRestResource</code>里包含了多个未被注解的参数</p>
<p>原因：参考<a href="https://stackoverflow.com/questions/47121182/multiple-parameters-in-web-service-java-jax-rs">multiple parameters in web service java JAX-RS</a>]</p>
<p>其中：资源方法不能具有多个实体参数。每个资源方法中可以有多个<code>@PathParam</code>，<code>@QueryParam</code>等，但只能有一个未注释的参数。参数未用@FormParam等注释注释的参数值（称为实体参数）是从请求实体主体映射的。实体主体和Java类型之间的转换是实体提供者的责任，<strong>资源方法必须最多具有一个实体参数</strong>。</p>
<p>解决办法有两种，第一种去掉第一个参数，第二种给第一个参数添加注解@Context。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux常用命令汇总（一）]]></title>
        <id>https://baobaodz.top/post/Commonly-Used-Linux-Command-Summary</id>
        <link href="https://baobaodz.top/post/Commonly-Used-Linux-Command-Summary">
        </link>
        <updated>2019-10-12T15:36:45.000Z</updated>
        <summary type="html"><![CDATA[<p>总结一些在日常工作中用到的处理文件和目录的linux命令</p>
]]></summary>
        <content type="html"><![CDATA[<p>总结一些在日常工作中用到的处理文件和目录的linux命令</p>
<!-- more -->
<h3 id="一-目录操作">一、目录操作</h3>
<h4 id="pwd-当前所在目录">pwd 当前所在目录</h4>
<pre><code>[root@izuf66fm097gavs15ngjfvz home]# pwd
/home
</code></pre>
<h4 id="ls-列出目录内容">ls 列出目录内容</h4>
<ul>
<li>
<p>英文原意：list</p>
</li>
<li>
<p>常用选项：</p>
</li>
<li>
<ul>
<li>-l ：详细信息显示</li>
<li>-a：显示所有文件，包括隐藏文件</li>
<li>-h：将文件容量以较易读的方式（GB，kB等）列出来</li>
</ul>
<p>另外，这些参数可以组合使用，例如<code>ls -la</code>，显示当前目录所有文件的详细信息</p>
<pre>[root@izuf66fm097gavs15ngjfvz home]# ls
oracle  swap
[root@izuf66fm097gavs15ngjfvz home]# ls -a
.  ..  oracle  swap
[root@izuf66fm097gavs15ngjfvz home]# ls -la
total 2097168
drwxr-xr-x.  3 root   root           4096 Apr 11  2018 .
dr-xr-xr-x. 19 root   root           4096 Sep  7 21:14 ..
drwx------   3 oracle oinstall       4096 Nov 14  2018 oracle
-rw-r--r--   1 root   root     2147483648 Oct  9  2018 swap
[root@izuf66fm097gavs15ngjfvz home]# ls -lah
total 2.1G
drwxr-xr-x.  3 root   root     4.0K Apr 11  2018 .
dr-xr-xr-x. 19 root   root     4.0K Sep  7 21:14 ..
drwx------   3 oracle oinstall 4.0K Nov 14  2018 oracle
-rw-r--r--   1 root   root     2.0G Oct  9  2018 swap
</pre>
</li>
</ul>
<h4 id="cd-切换目录"><strong>cd</strong> 切换目录</h4>
<ul>
<li>英文原意：change directory</li>
<li>cd oracle     //进入指定目录,相当于<br>
cd ./oracle   // 切换到当前目录下的shi目录中，“.”表示当前目录<br>
cd ..         //  回到上级目录<br>
cd -          // 返回进入此目录之前的目录<pre>[root@izuf66fm097gavs15ngjfvz home]# ls
oracle  swap
[root@izuf66fm097gavs15ngjfvz home]# cd oracle
[root@izuf66fm097gavs15ngjfvz oracle]# ls
oradiag_oracle
[root@izuf66fm097gavs15ngjfvz oracle]# cd ..
[root@izuf66fm097gavs15ngjfvz home]# cd ./oracle
[root@izuf66fm097gavs15ngjfvz oracle]# ls
oradiag_oracle
[root@izuf66fm097gavs15ngjfvz oracle]# cd -
/home
[root@izuf66fm097gavs15ngjfvz home]# ls
oracle  swap
[root@izuf66fm097gavs15ngjfvz home]# 
</pre>
</li>
</ul>
<h4 id="mkdir-新建目录"><strong>mkdir 新建目录</strong></h4>
<pre><code>&lt;pre&gt;root@izuf66fm097gavs15ngjfvz /]# cd home
[root@izuf66fm097gavs15ngjfvz home]# ls
oracle  swap
[root@izuf66fm097gavs15ngjfvz home]# mkdir mysql
[root@izuf66fm097gavs15ngjfvz home]# ls
mysql  oracle  swap
&lt;/pre&gt;
</code></pre>
<h4 id="rmdir-删除空目录"><strong>rmdir 删除空目录</strong></h4>
<pre><code>如目录不为空，删除不了，需要使用`rm -rf 目录名`才能强制删除非空目录。

&lt;pre&gt;[root@izuf66fm097gavs15ngjfvz home]# ls
oracle  swap
[root@izuf66fm097gavs15ngjfvz home]# mkdir mysql
[root@izuf66fm097gavs15ngjfvz home]# ls
mysql  oracle  swap
[root@izuf66fm097gavs15ngjfvz home]# cd mysql
[root@izuf66fm097gavs15ngjfvz mysql]# touch readme.md
[root@izuf66fm097gavs15ngjfvz mysql]# cd ../
[root@izuf66fm097gavs15ngjfvz home]# rmdir mysql
rmdir: failed to remove ‘mysql’: Directory not empty
[root@izuf66fm097gavs15ngjfvz home]# rm -rf mysql
[root@izuf66fm097gavs15ngjfvz home]# ls
oracle  swap
[root@izuf66fm097gavs15ngjfvz home]#
&lt;/pre&gt;
</code></pre>
<h3 id="二-文件操作">二、文件操作</h3>
<h4 id="touch-新建文件"><strong>touch 新建文件</strong></h4>
<p>如果一个文件名参数是一个不存在的文件，则会创建一个空文件。</p>
<p>如果存在则会更新文件访问时间。并不会对文件内容做出改变。</p>
<pre><code>&lt;pre&gt;touch test.java    // 如果文件不存在，就创建test.java
&lt;/pre&gt;

example:

&lt;pre&gt;[root@izuf66fm097gavs15ngjfvz home]# touch test.java
[root@izuf66fm097gavs15ngjfvz home]# ls -l
total 2097160
drwx------ 3 oracle oinstall       4096 Nov 14  2018 oracle
-rw-r--r-- 1 root   root     2147483648 Oct  9  2018 swap
-rw-r--r-- 1 root   root              0 Oct 11 23:33 test.java
[root@izuf66fm097gavs15ngjfvz home]# touch test.java
[root@izuf66fm097gavs15ngjfvz home]# ls -l
total 2097160
drwx------ 3 oracle oinstall       4096 Nov 14  2018 oracle
-rw-r--r-- 1 root   root     2147483648 Oct  9  2018 swap
-rw-r--r-- 1 root   root              0 Oct 11 23:34 test.java
&lt;/pre&gt;
</code></pre>
<h4 id="mv-移动和重命名文件"><strong>mv 移动和重命名文件</strong></h4>
<ul>
<li>
<p>英文原意：move</p>
</li>
<li>
<p>常用选项：</p>
</li>
<li>
<ul>
<li>-f ：force强制的意思，如果目标文件已经存在，不会询问而直接覆盖</li>
<li>-i ：若目标文件已经存在，就会询问是否覆盖</li>
<li>-u ：若目标文件已经存在，且比目标文件新，才会更新</li>
</ul>
<p><strong>mv file1 file2 file3 dir   // 把文件file1、file2、file3移动到当前目录dir中</strong></p>
<p><strong>mv file1 file2 file3 ../dir   // 把文件file1、file2、file3移动到当上级目录dir中</strong></p>
<p><strong>mv file1 file2  // 把文件file1重命名为file2</strong></p>
<pre>[root@izuf66fm097gavs15ngjfvz home]# ls
oracle  swap  test.java
[root@izuf66fm097gavs15ngjfvz home]# mv test.java oracle 
[root@izuf66fm097gavs15ngjfvz home]# ls
oracle  swap
[root@izuf66fm097gavs15ngjfvz home]# cd oracle
[root@izuf66fm097gavs15ngjfvz oracle]# ls
oradiag_oracle  test.java
[root@izuf66fm097gavs15ngjfvz oracle]# mv test.java HelloWorld.java
[root@izuf66fm097gavs15ngjfvz oracle]# ls
HelloWorld.java  oradiag_oracle
</pre>
</li>
</ul>
<h4 id="ls-l-查看文件权限">ls -l 查看文件权限</h4>
<h4 id="chmod-修改权限">chmod 修改权限</h4>
<pre><code>&lt;pre&gt;[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l HelloWorld.java 
-rw-r--r-- 1 root root 0 Oct 13 15:20 HelloWorld.java
[root@izuf66fm097gavs15ngjfvz HelloWorld]# chmod 777 HelloWorld.java 
[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l HelloWorld.java 
-rwxrwxrwx 1 root root 0 Oct 13 15:20 HelloWorld.java
[root@izuf66fm097gavs15ngjfvz HelloWorld]# chmod 666 HelloWorld.java 
[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l
total 0
-rw-rw-rw- 1 root root 0 Oct 13 15:20 HelloWorld.java
&lt;/pre&gt;
</code></pre>
<p>r表示读取（read）权限，w表示写入（write）权限，x表示执行（eXecute）权限，通常具体的权限由数字来表示：r=4，w=2，x=1</p>
<p>若要rwx属性则4+2+1=7；</p>
<p>若要rw-属性则4+2=6；</p>
<p>若要r-x属性则4+1=7。</p>
<p>常用修改权限的命令：</p>
<pre><code>&lt;pre&gt;sudo chmod 600 ××× （只有所有者有读和写的权限）

sudo chmod 644 ××× （所有者有读和写的权限，组用户只有读的权限）

sudo chmod 700 ××× （只有所有者有读和写以及执行的权限）

sudo chmod 666 ××× （每个人都有读和写的权限）

sudo chmod 777 ××× （每个人都有读和写以及执行的权限）
&lt;/pre&gt;

若要修改目录下所有文件的权限:chmod -R 权限 目录

&lt;pre&gt;`[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l
total 0
-rw-r--r-- 1 root root 0 Oct 13 15:32 app.java
-rw-rw-rw- 1 root root 0 Oct 13 15:20 HelloWorld.java
[root@izuf66fm097gavs15ngjfvz HelloWorld]# chmod -R 777 ../HelloWorld
[root@izuf66fm097gavs15ngjfvz HelloWorld]# 
[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls -l
total 0
-rwxrwxrwx 1 root root 0 Oct 13 15:32 app.java
-rwxrwxrwx 1 root root 0 Oct 13 15:20 HelloWorld.java
`&lt;/pre&gt;
</code></pre>
<h4 id="rm-删除文件或目录">rm 删除文件或目录</h4>
<ul>
<li>常用选项：</li>
<li>
<ul>
<li>-f ：就是force的意思，忽略不存在的文件，不会出现警告消息</li>
<li>-i ：互动模式，在删除前会询问用户是否操作</li>
<li>-r ：(recursive) 指示rm将参数中列出的全部目录和子目录均递归地删除。</li>
</ul>
</li>
</ul>
<h4 id="cat-查看文件内容">cat 查看文件内容</h4>
<pre><code>&lt;pre&gt;[root@izuf66fm097gavs15ngjfvz HelloWorld]# vi HelloWorld.java 
[root@izuf66fm097gavs15ngjfvz HelloWorld]# cat HelloWorld.java 
import test.package;
&lt;/pre&gt;
</code></pre>
<h4 id="find-查找文件">find 查找文件</h4>
<pre><code>&lt;pre&gt;[root@izuf66fm097gavs15ngjfvz HelloWorld]# ls
appConfiguration.java  app.java  HelloWorld.java
[root@izuf66fm097gavs15ngjfvz HelloWorld]# find app.java
app.java
[root@izuf66fm097gavs15ngjfvz HelloWorld]# find app*.java
appConfiguration.java
app.java
[root@izuf66fm097gavs15ngjfvz home]# find oracle/HelloWorld/ -name &amp;quot;*.java&amp;quot;
oracle/HelloWorld/appConfiguration.java
oracle/HelloWorld/HelloWorld.java
oracle/HelloWorld/app.java
</code></pre>
<h4 id="vi-编辑文件">vi 编辑文件</h4>
<p>依次输入vi进入编辑页面，i进入insert状态，Esc退出编辑模式，输入:wq保存退出</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解决域名无法访问的问题]]></title>
        <id>https://baobaodz.top/post/Resolve-domain-name-unreachable-issue</id>
        <link href="https://baobaodz.top/post/Resolve-domain-name-unreachable-issue">
        </link>
        <updated>2019-09-22T15:22:01.000Z</updated>
        <content type="html"><![CDATA[<h4 id="解决域名无法访问的问题">解决域名无法访问的问题</h4>
<p>最近有空整理我之前写的网站，发现可以通过ip+项目地址访问网站，如http://101.132.116.203:8080/MyBlog/    但是通过域名访问不了。<img src="https://s2.ax1x.com/2019/09/28/uQNqKI.png" alt="拒绝请求"></p>
<p>可以ping通域名。服务器防火墙已关闭。安全组也配置了端口开放 。在阿里云上进行检测。<img src="https://s2.ax1x.com/2019/09/28/uQNjVf.png" alt="检测"></p>
<p>查看80端口是否处于监听状态。发现并没有。一开始我以为是服务器防火墙需要放行80端口，搜了一堆怎么开放80端口的，不行。<img src="https://s2.ax1x.com/2019/09/28/uQNLrt.png" alt="端口监听"></p>
<p>提工单阿里云技术人员说我是用8080端口服务的，用域名自然是访问不了的。需要域名+8080端口才能访问，一试还真可以。但是我想还需要用80端口访问。于是进入修改/root/java/tomcat/apache-tomcat-8.5.34/conf目录下的sever.xml文件，启动80端口监听。</p>
<pre><code class="language-xml">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;
           connectionTimeout=&quot;20000&quot;
           redirectPort=&quot;8443&quot; /&gt;
改为
&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;
           connectionTimeout=&quot;20000&quot;
           redirectPort=&quot;8443&quot; /&gt;
</code></pre>
<p>查看端口监听,可以看到8080端口没有了，出现了80端口监听。</p>
<pre><code class="language-shell">[root@izuf66fm097gavs15ngjfvz bin]# netstat -an | grep 80
tcp        0      0 0.0.0.0:8009            0.0.0.0:*               LISTEN     
tcp        4      0 0.0.0.0:80              0.0.0.0:*               LISTEN     
tcp        1      0 172.19.93.164:80        180.111.33.207:11809    CLOSE_WAIT 
tcp        0      0 172.19.93.164:26252     100.100.30.26:80        ESTABLISHED
tcp        0     52 172.19.93.164:22        180.111.33.207:11847    ESTABLISHED
tcp        0      0 172.19.93.164:80        180.111.33.207:11834    ESTABLISHED
tcp        0      0 172.19.93.164:1521      101.132.116.203:46580   ESTABLISHED
tcp      527      0 172.19.93.164:80        180.111.33.207:11833    ESTABLISHED
tcp      553      0 172.19.93.164:80        180.111.33.207:11808    ESTABLISHED
tcp        0      0 172.19.93.164:22        180.111.33.207:9649     ESTABLISHED
</code></pre>
<p>重启Tomcat。这里我又犯了一个错误。我直接启动tomcat，要知道Tomcat本来就运行着的，这样一点用也没有。</p>
<pre><code class="language-shell">[root@izuf66fm097gavs15ngjfvz bin]# cd /root/java/tomcat/apache-tomcat-8.5.34/bin
[root@izuf66fm097gavs15ngjfvz bin]# ./satrtup.sh
</code></pre>
<p>正确做法应该先关闭Tomcat，再启动。</p>
<pre><code class="language-shell">[root@izuf66fm097gavs15ngjfvz bin]# cd /root/java/tomcat/apache-tomcat-8.5.34/bin
[root@izuf66fm097gavs15ngjfvz bin]# ./shutdown.sh
[root@izuf66fm097gavs15ngjfvz bin]# ./startup.sh
Using CATALINA_BASE:   /root/java/tomcat/apache-tomcat-8.5.34
Using CATALINA_HOME:   /root/java/tomcat/apache-tomcat-8.5.34
Using CATALINA_TMPDIR: /root/java/tomcat/apache-tomcat-8.5.34/temp
Using JRE_HOME:        /root/java/jdk/jdk1.8.0_181/jre
Using CLASSPATH:       /root/java/tomcat/apache-tomcat-8.5.34/bin/bootstrap.jar:/root/java/tomcat/apache-tomcat-8.5.34/bin/tomcat-juli.jar
Tomcat started.
</code></pre>
<p>访问baobaodz.com就可以访问了。</p>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://baobaodz.top/post/hello-gridea</id>
        <link href="https://baobaodz.top/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>